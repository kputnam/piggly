# Autogenerated from a Treetop grammar. Edits may be lost.


module Piggly
  include Treetop::Runtime

  def root
    @root ||= :start
  end

  def _nt_start
    start_index = index
    if node_cache[:start].has_key?(index)
      cached = node_cache[:start][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_procedure
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:start][start_index] = r0

    r0
  end

  module Procedure0
    def procedureHeader
      elements[0]
    end

    def name
      elements[1]
    end

    def parameters
      elements[3]
    end

    def tSpace1
      elements[4]
    end

    def procedureReturn
      elements[5]
    end

    def return
      elements[6]
    end

    def tSpace2
      elements[7]
    end

    def kwAS
      elements[8]
    end

    def tSpace3
      elements[9]
    end

    def procedureBody
      elements[10]
    end

    def procedureFooter
      elements[11]
    end
  end

  def _nt_procedure
    start_index = index
    if node_cache[:procedure].has_key?(index)
      cached = node_cache[:procedure][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_procedureHeader
    s0 << r1
    if r1
      r2 = _nt_tIdentifier
      s0 << r2
      if r2
        r4 = _nt_tSpace
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          r5 = _nt_parameterList
          s0 << r5
          if r5
            r6 = _nt_tSpace
            s0 << r6
            if r6
              r7 = _nt_procedureReturn
              s0 << r7
              if r7
                r8 = _nt_tType
                s0 << r8
                if r8
                  r9 = _nt_tSpace
                  s0 << r9
                  if r9
                    r10 = _nt_kwAS
                    s0 << r10
                    if r10
                      r11 = _nt_tSpace
                      s0 << r11
                      if r11
                        r12 = _nt_procedureBody
                        s0 << r12
                        if r12
                          r13 = _nt_procedureFooter
                          s0 << r13
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::Procedure,input, i0...index, s0)
      r0.extend(Procedure0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:procedure][start_index] = r0

    r0
  end

  module ProcedureHeader0
    def tSpace1
      elements[2]
    end

    def tSpace2
      elements[4]
    end

    def tSpace3
      elements[6]
    end

    def tSpace4
      elements[8]
    end
  end

  def _nt_procedureHeader
    start_index = index
    if node_cache[:procedureHeader].has_key?(index)
      cached = node_cache[:procedureHeader][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_tSpace
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?('create', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('create')
        r3 = nil
      end
      s0 << r3
      if r3
        r4 = _nt_tSpace
        s0 << r4
        if r4
          if has_terminal?('or', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('or')
            r5 = nil
          end
          s0 << r5
          if r5
            r6 = _nt_tSpace
            s0 << r6
            if r6
              if has_terminal?('replace', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 7))
                @index += 7
              else
                terminal_parse_failure('replace')
                r7 = nil
              end
              s0 << r7
              if r7
                r8 = _nt_tSpace
                s0 << r8
                if r8
                  if has_terminal?('function', false, index)
                    r9 = instantiate_node(SyntaxNode,input, index...(index + 8))
                    @index += 8
                  else
                    terminal_parse_failure('function')
                    r9 = nil
                  end
                  s0 << r9
                  if r9
                    r10 = _nt_tSpace
                    s0 << r10
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TextNode,input, i0...index, s0)
      r0.extend(ProcedureHeader0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:procedureHeader][start_index] = r0

    r0
  end

  module ProcedureReturn0
    def tSpace
      elements[1]
    end
  end

  module ProcedureReturn1
    def tSpace
      elements[1]
    end

  end

  def _nt_procedureReturn
    start_index = index
    if node_cache[:procedureReturn].has_key?(index)
      cached = node_cache[:procedureReturn][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('returns', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('returns')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tSpace
      s0 << r2
      if r2
        i4, s4 = index, []
        if has_terminal?('setof', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure('setof')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_tSpace
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(ProcedureReturn0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TextNode,input, i0...index, s0)
      r0.extend(ProcedureReturn1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:procedureReturn][start_index] = r0

    r0
  end

  module ProcedureBody0
    def dollarQuoteMarker1
      elements[0]
    end

    def body
      elements[2]
    end

    def dollarQuoteMarker2
      elements[5]
    end
  end

  module ProcedureBody1
    def body
      elements[2]
    end

  end

  def _nt_procedureBody
    start_index = index
    if node_cache[:procedureBody].has_key?(index)
      cached = node_cache[:procedureBody][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_dollarQuoteMarker
    s1 << r2
    if r2
      r4 = _nt_tSpace
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_block
        s1 << r5
        if r5
          if has_terminal?(';', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(';')
            r7 = nil
          end
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r9 = _nt_tSpace
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r8
            if r8
              r10 = _nt_dollarQuoteMarker
              s1 << r10
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(ProcedureBody0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i11, s11 = index, []
      if has_terminal?("'", false, index)
        r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("'")
        r12 = nil
      end
      s11 << r12
      if r12
        r14 = _nt_tSpace
        if r14
          r13 = r14
        else
          r13 = instantiate_node(SyntaxNode,input, index...index)
        end
        s11 << r13
        if r13
          r15 = _nt_block
          s11 << r15
          if r15
            if has_terminal?(';', false, index)
              r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(';')
              r17 = nil
            end
            if r17
              r16 = r17
            else
              r16 = instantiate_node(SyntaxNode,input, index...index)
            end
            s11 << r16
            if r16
              r19 = _nt_tSpace
              if r19
                r18 = r19
              else
                r18 = instantiate_node(SyntaxNode,input, index...index)
              end
              s11 << r18
              if r18
                if has_terminal?("'", false, index)
                  r20 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("'")
                  r20 = nil
                end
                s11 << r20
              end
            end
          end
        end
      end
      if s11.last
        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
        r11.extend(ProcedureBody1)
      else
        @index = i11
        r11 = nil
      end
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:procedureBody][start_index] = r0

    r0
  end

  module ProcedureFooter0
    def expressionUntilSemiColon
      elements[0]
    end

  end

  def _nt_procedureFooter
    start_index = index
    if node_cache[:procedureFooter].has_key?(index)
      cached = node_cache[:procedureFooter][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_expressionUntilSemiColon
    s0 << r1
    if r1
      if has_terminal?(';', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(';')
        r2 = nil
      end
      s0 << r2
      if r2
        r4 = _nt_tSpace
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TextNode,input, i0...index, s0)
      r0.extend(ProcedureFooter0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:procedureFooter][start_index] = r0

    r0
  end

  module ParameterList0
    def name
      elements[1]
    end

    def tSpace
      elements[2]
    end

    def type
      elements[3]
    end

  end

  module ParameterList1
    def name
      elements[1]
    end

    def tSpace
      elements[2]
    end

    def type
      elements[3]
    end
  end

  module ParameterList2
  end

  def _nt_parameterList
    start_index = index
    if node_cache[:parameterList].has_key?(index)
      cached = node_cache[:parameterList][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('(', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_tSpace
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          r6 = _nt_tIdentifier
          s3 << r6
          if r6
            r7 = _nt_tSpace
            s3 << r7
            if r7
              r8 = _nt_tType
              s3 << r8
              if r8
                r10 = _nt_tSpace
                if r10
                  r9 = r10
                else
                  r9 = instantiate_node(SyntaxNode,input, index...index)
                end
                s3 << r9
                if r9
                  if has_terminal?(',', false, index)
                    r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(',')
                    r11 = nil
                  end
                  s3 << r11
                end
              end
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(ParameterList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        i13, s13 = index, []
        r15 = _nt_tSpace
        if r15
          r14 = r15
        else
          r14 = instantiate_node(SyntaxNode,input, index...index)
        end
        s13 << r14
        if r14
          r16 = _nt_tIdentifier
          s13 << r16
          if r16
            r17 = _nt_tSpace
            s13 << r17
            if r17
              r18 = _nt_tType
              s13 << r18
            end
          end
        end
        if s13.last
          r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
          r13.extend(ParameterList1)
        else
          @index = i13
          r13 = nil
        end
        if r13
          r12 = r13
        else
          r12 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r12
        if r12
          r20 = _nt_tSpace
          if r20
            r19 = r20
          else
            r19 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r19
          if r19
            if has_terminal?(')', false, index)
              r21 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(')')
              r21 = nil
            end
            s0 << r21
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ParameterList2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:parameterList][start_index] = r0

    r0
  end

  module Statement0
    def block
      elements[0]
    end

  end

  module Statement1
    def inner
      elements[0]
    end

    def tail
      elements[1]
    end
  end

  def _nt_statement
    start_index = index
    if node_cache[:statement].has_key?(index)
      cached = node_cache[:statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    i2, s2 = index, []
    r3 = _nt_block
    s2 << r3
    if r3
      if has_terminal?(';', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(';')
        r4 = nil
      end
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(Statement0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r5 = _nt_stmtAssignment
      if r5
        r1 = r5
      else
        r6 = _nt_stmtIf
        if r6
          r1 = r6
        else
          r7 = _nt_stmtCase
          if r7
            r1 = r7
          else
            r8 = _nt_stmtLoop
            if r8
              r1 = r8
            else
              r9 = _nt_stmtWhileLoop
              if r9
                r1 = r9
              else
                r10 = _nt_stmtForLoop
                if r10
                  r1 = r10
                else
                  r11 = _nt_stmtExit
                  if r11
                    r1 = r11
                  else
                    r12 = _nt_stmtContinue
                    if r12
                      r1 = r12
                    else
                      r13 = _nt_stmtReturn
                      if r13
                        r1 = r13
                      else
                        r14 = _nt_stmtRaise
                        if r14
                          r1 = r14
                        else
                          r15 = _nt_stmtExecSql
                          if r15
                            r1 = r15
                          else
                            r16 = _nt_stmtNull
                            if r16
                              r1 = r16
                            else
                              r17 = _nt_stmtPerform
                              if r17
                                r1 = r17
                              else
                                r18 = _nt_stmtDynamicExecute
                                if r18
                                  r1 = r18
                                else
                                  r19 = _nt_stmtGetDiag
                                  if r19
                                    r1 = r19
                                  else
                                    r20 = _nt_stmtOpen
                                    if r20
                                      r1 = r20
                                    else
                                      r21 = _nt_stmtFetch
                                      if r21
                                        r1 = r21
                                      else
                                        r22 = _nt_stmtMove
                                        if r22
                                          r1 = r22
                                        else
                                          r23 = _nt_stmtClose
                                          if r23
                                            r1 = r23
                                          else
                                            @index = i1
                                            r1 = nil
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    s0 << r1
    if r1
      r25 = _nt_tSpace
      if r25
        r24 = r25
      else
        r24 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r24
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::Statement,input, i0...index, s0)
      r0.extend(Statement1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:statement][start_index] = r0

    r0
  end

  module Block0
    def tSpace
      elements[0]
    end

    def label_close
      elements[1]
    end
  end

  module Block1
    def label_open
      elements[0]
    end

    def tSpace
      elements[1]
    end

    def blockDeclarations
      elements[2]
    end

    def kwBEGIN
      elements[3]
    end

    def bodySpace
      elements[4]
    end

    def bodyStub
      elements[5]
    end

    def body
      elements[6]
    end

    def kwEND
      elements[8]
    end

  end

  module Block2
    def blockDeclarations
      elements[0]
    end

    def kwBEGIN
      elements[1]
    end

    def bodySpace
      elements[2]
    end

    def bodyStub
      elements[3]
    end

    def body
      elements[4]
    end

    def kwEND
      elements[6]
    end

  end

  def _nt_block
    start_index = index
    if node_cache[:block].has_key?(index)
      cached = node_cache[:block][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_tLabel
    s1 << r2
    if r2
      r3 = _nt_tSpace
      s1 << r3
      if r3
        s4, i4 = [], index
        loop do
          r5 = _nt_stmtDeclare
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s1 << r4
        if r4
          r6 = _nt_kwBEGIN
          s1 << r6
          if r6
            r7 = _nt_tSpace
            s1 << r7
            if r7
              r8 = _nt_stubNode
              s1 << r8
              if r8
                s9, i9 = [], index
                loop do
                  r10 = _nt_statement
                  if r10
                    s9 << r10
                  else
                    break
                  end
                end
                r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                s1 << r9
                if r9
                  r12 = _nt_blockExceptions
                  if r12
                    r11 = r12
                  else
                    r11 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s1 << r11
                  if r11
                    r13 = _nt_kwEND
                    s1 << r13
                    if r13
                      i15, s15 = index, []
                      r16 = _nt_tSpace
                      s15 << r16
                      if r16
                        r17 = _nt_tLabel
                        s15 << r17
                      end
                      if s15.last
                        r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
                        r15.extend(Block0)
                      else
                        @index = i15
                        r15 = nil
                      end
                      if r15
                        r14 = r15
                      else
                        r14 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s1 << r14
                      if r14
                        r19 = _nt_tSpace
                        if r19
                          r18 = r19
                        else
                          r18 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s1 << r18
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Piggly::Parser::Nodes::Block,input, i1...index, s1)
      r1.extend(Block1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i20, s20 = index, []
      s21, i21 = [], index
      loop do
        r22 = _nt_stmtDeclare
        if r22
          s21 << r22
        else
          break
        end
      end
      r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
      s20 << r21
      if r21
        r23 = _nt_kwBEGIN
        s20 << r23
        if r23
          r24 = _nt_tSpace
          s20 << r24
          if r24
            r25 = _nt_stubNode
            s20 << r25
            if r25
              s26, i26 = [], index
              loop do
                r27 = _nt_statement
                if r27
                  s26 << r27
                else
                  break
                end
              end
              r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
              s20 << r26
              if r26
                r29 = _nt_blockExceptions
                if r29
                  r28 = r29
                else
                  r28 = instantiate_node(SyntaxNode,input, index...index)
                end
                s20 << r28
                if r28
                  r30 = _nt_kwEND
                  s20 << r30
                  if r30
                    r32 = _nt_tSpace
                    if r32
                      r31 = r32
                    else
                      r31 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s20 << r31
                  end
                end
              end
            end
          end
        end
      end
      if s20.last
        r20 = instantiate_node(Piggly::Parser::Nodes::Block,input, i20...index, s20)
        r20.extend(Block2)
      else
        @index = i20
        r20 = nil
      end
      if r20
        r0 = r20
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:block][start_index] = r0

    r0
  end

  module StmtAssignment0
    def lval
      elements[0]
    end

    def kwASSIGN
      elements[2]
    end

    def rval
      elements[4]
    end

  end

  def _nt_stmtAssignment
    start_index = index
    if node_cache[:stmtAssignment].has_key?(index)
      cached = node_cache[:stmtAssignment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_lValue
    s0 << r1
    if r1
      r3 = _nt_tSpace
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r4 = _nt_kwASSIGN
        s0 << r4
        if r4
          r6 = _nt_ws
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            r7 = _nt_expressionUntilSemiColon
            s0 << r7
            if r7
              if has_terminal?(';', false, index)
                r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(';')
                r8 = nil
              end
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::Assignment,input, i0...index, s0)
      r0.extend(StmtAssignment0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stmtAssignment][start_index] = r0

    r0
  end

  module StmtCase0
    def kwCASE1
      elements[0]
    end

    def tSpace1
      elements[1]
    end

    def cases
      elements[2]
    end

    def else
      elements[3]
    end

    def kwEND
      elements[4]
    end

    def tSpace2
      elements[5]
    end

    def kwCASE2
      elements[6]
    end

  end

  module StmtCase1
    def kwCASE1
      elements[0]
    end

    def tSpace1
      elements[1]
    end

    def expr
      elements[2]
    end

    def cases
      elements[3]
    end

    def else
      elements[4]
    end

    def kwEND
      elements[5]
    end

    def tSpace2
      elements[6]
    end

    def kwCASE2
      elements[7]
    end

  end

  def _nt_stmtCase
    start_index = index
    if node_cache[:stmtCase].has_key?(index)
      cached = node_cache[:stmtCase][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_kwCASE
    s1 << r2
    if r2
      r3 = _nt_tSpace
      s1 << r3
      if r3
        s4, i4 = [], index
        loop do
          r5 = _nt_condWhen
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s1 << r4
        if r4
          r7 = _nt_stmtElse
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_kwEND
            s1 << r8
            if r8
              r9 = _nt_tSpace
              s1 << r9
              if r9
                r10 = _nt_kwCASE
                s1 << r10
                if r10
                  r12 = _nt_tSpace
                  if r12
                    r11 = r12
                  else
                    r11 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s1 << r11
                  if r11
                    if has_terminal?(';', false, index)
                      r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(';')
                      r13 = nil
                    end
                    s1 << r13
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Piggly::Parser::Nodes::Cond,input, i1...index, s1)
      r1.extend(StmtCase0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i14, s14 = index, []
      r15 = _nt_kwCASE
      s14 << r15
      if r15
        r16 = _nt_tSpace
        s14 << r16
        if r16
          r17 = _nt_expressionUntilWhen
          s14 << r17
          if r17
            s18, i18 = [], index
            loop do
              r19 = _nt_caseWhen
              if r19
                s18 << r19
              else
                break
              end
            end
            if s18.empty?
              @index = i18
              r18 = nil
            else
              r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
            end
            s14 << r18
            if r18
              r21 = _nt_stmtElse
              if r21
                r20 = r21
              else
                r20 = instantiate_node(SyntaxNode,input, index...index)
              end
              s14 << r20
              if r20
                r22 = _nt_kwEND
                s14 << r22
                if r22
                  r23 = _nt_tSpace
                  s14 << r23
                  if r23
                    r24 = _nt_kwCASE
                    s14 << r24
                    if r24
                      r26 = _nt_tSpace
                      if r26
                        r25 = r26
                      else
                        r25 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s14 << r25
                      if r25
                        if has_terminal?(';', false, index)
                          r27 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure(';')
                          r27 = nil
                        end
                        s14 << r27
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s14.last
        r14 = instantiate_node(Piggly::Parser::Nodes::Case,input, i14...index, s14)
        r14.extend(StmtCase1)
      else
        @index = i14
        r14 = nil
      end
      if r14
        r0 = r14
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:stmtCase][start_index] = r0

    r0
  end

  module StmtIf0
    def kwIF1
      elements[0]
    end

    def condSpace
      elements[1]
    end

    def condStub
      elements[2]
    end

    def cond
      elements[3]
    end

    def kwTHEN
      elements[4]
    end

    def bodySpace
      elements[5]
    end

    def bodyStub
      elements[6]
    end

    def body
      elements[7]
    end

    def else
      elements[8]
    end

    def kwEND
      elements[9]
    end

    def tSpace
      elements[10]
    end

    def kwIF2
      elements[11]
    end

  end

  def _nt_stmtIf
    start_index = index
    if node_cache[:stmtIf].has_key?(index)
      cached = node_cache[:stmtIf][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_kwIF
    s0 << r1
    if r1
      r3 = _nt_tSpace
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r4 = _nt_stubNode
        s0 << r4
        if r4
          r5 = _nt_expressionUntilThen
          s0 << r5
          if r5
            r6 = _nt_kwTHEN
            s0 << r6
            if r6
              r7 = _nt_tSpace
              s0 << r7
              if r7
                r8 = _nt_stubNode
                s0 << r8
                if r8
                  s9, i9 = [], index
                  loop do
                    r10 = _nt_statement
                    if r10
                      s9 << r10
                    else
                      break
                    end
                  end
                  r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                  s0 << r9
                  if r9
                    r12 = _nt_stmtElse
                    if r12
                      r11 = r12
                    else
                      r11 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r11
                    if r11
                      r13 = _nt_kwEND
                      s0 << r13
                      if r13
                        r14 = _nt_tSpace
                        s0 << r14
                        if r14
                          r15 = _nt_kwIF
                          s0 << r15
                          if r15
                            r17 = _nt_tSpace
                            if r17
                              r16 = r17
                            else
                              r16 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s0 << r16
                            if r16
                              if has_terminal?(';', false, index)
                                r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                @index += 1
                              else
                                terminal_parse_failure(';')
                                r18 = nil
                              end
                              s0 << r18
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::If,input, i0...index, s0)
      r0.extend(StmtIf0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stmtIf][start_index] = r0

    r0
  end

  module StmtElse0
    def kwELSIF
      elements[0]
    end

    def condSpace
      elements[1]
    end

    def condStub
      elements[2]
    end

    def cond
      elements[3]
    end

    def kwTHEN
      elements[4]
    end

    def bodySpace
      elements[5]
    end

    def bodyStub
      elements[6]
    end

    def body
      elements[7]
    end

    def else
      elements[8]
    end
  end

  module StmtElse1
    def kwELSE
      elements[0]
    end

    def bodySpace
      elements[1]
    end

    def bodyStub
      elements[2]
    end

    def body
      elements[3]
    end
  end

  def _nt_stmtElse
    start_index = index
    if node_cache[:stmtElse].has_key?(index)
      cached = node_cache[:stmtElse][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_kwELSIF
    s1 << r2
    if r2
      r4 = _nt_tSpace
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_stubNode
        s1 << r5
        if r5
          r6 = _nt_expressionUntilThen
          s1 << r6
          if r6
            r7 = _nt_kwTHEN
            s1 << r7
            if r7
              r8 = _nt_tSpace
              s1 << r8
              if r8
                r9 = _nt_stubNode
                s1 << r9
                if r9
                  s10, i10 = [], index
                  loop do
                    r11 = _nt_statement
                    if r11
                      s10 << r11
                    else
                      break
                    end
                  end
                  r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                  s1 << r10
                  if r10
                    r13 = _nt_stmtElse
                    if r13
                      r12 = r13
                    else
                      r12 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s1 << r12
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Piggly::Parser::Nodes::If,input, i1...index, s1)
      r1.extend(StmtElse0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i14, s14 = index, []
      r15 = _nt_kwELSE
      s14 << r15
      if r15
        r16 = _nt_tSpace
        s14 << r16
        if r16
          r17 = _nt_stubNode
          s14 << r17
          if r17
            s18, i18 = [], index
            loop do
              r19 = _nt_statement
              if r19
                s18 << r19
              else
                break
              end
            end
            r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
            s14 << r18
          end
        end
      end
      if s14.last
        r14 = instantiate_node(Piggly::Parser::Nodes::Else,input, i14...index, s14)
        r14.extend(StmtElse1)
      else
        @index = i14
        r14 = nil
      end
      if r14
        r0 = r14
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:stmtElse][start_index] = r0

    r0
  end

  module StmtLoop0
    def tSpace
      elements[0]
    end

    def label_close
      elements[1]
    end
  end

  module StmtLoop1
    def label_open
      elements[0]
    end

    def tSpace1
      elements[1]
    end

    def cond
      elements[2]
    end

    def bodySpace
      elements[3]
    end

    def bodyStub
      elements[4]
    end

    def body
      elements[5]
    end

    def kwEND
      elements[6]
    end

    def tSpace2
      elements[7]
    end

    def kwLOOP
      elements[8]
    end

    def exitStub
      elements[12]
    end
  end

  module StmtLoop2
    def cond
      elements[0]
    end

    def bodySpace
      elements[1]
    end

    def bodyStub
      elements[2]
    end

    def body
      elements[3]
    end

    def kwEND
      elements[4]
    end

    def tSpace
      elements[5]
    end

    def kwLOOP
      elements[6]
    end

    def exitStub
      elements[9]
    end
  end

  def _nt_stmtLoop
    start_index = index
    if node_cache[:stmtLoop].has_key?(index)
      cached = node_cache[:stmtLoop][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_tLabel
    s1 << r2
    if r2
      r3 = _nt_tSpace
      s1 << r3
      if r3
        r4 = _nt_kwLOOP
        s1 << r4
        if r4
          r5 = _nt_tSpace
          s1 << r5
          if r5
            r6 = _nt_stubNode
            s1 << r6
            if r6
              s7, i7 = [], index
              loop do
                r8 = _nt_statement
                if r8
                  s7 << r8
                else
                  break
                end
              end
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              s1 << r7
              if r7
                r9 = _nt_kwEND
                s1 << r9
                if r9
                  r10 = _nt_tSpace
                  s1 << r10
                  if r10
                    r11 = _nt_kwLOOP
                    s1 << r11
                    if r11
                      i13, s13 = index, []
                      r14 = _nt_tSpace
                      s13 << r14
                      if r14
                        r15 = _nt_tIdentifier
                        s13 << r15
                      end
                      if s13.last
                        r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                        r13.extend(StmtLoop0)
                      else
                        @index = i13
                        r13 = nil
                      end
                      if r13
                        r12 = r13
                      else
                        r12 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s1 << r12
                      if r12
                        r17 = _nt_tSpace
                        if r17
                          r16 = r17
                        else
                          r16 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s1 << r16
                        if r16
                          if has_terminal?(';', false, index)
                            r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure(';')
                            r18 = nil
                          end
                          s1 << r18
                          if r18
                            r19 = _nt_stubNode
                            s1 << r19
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Piggly::Parser::Nodes::Loop,input, i1...index, s1)
      r1.extend(StmtLoop1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i20, s20 = index, []
      r21 = _nt_kwLOOP
      s20 << r21
      if r21
        r22 = _nt_tSpace
        s20 << r22
        if r22
          r23 = _nt_stubNode
          s20 << r23
          if r23
            s24, i24 = [], index
            loop do
              r25 = _nt_statement
              if r25
                s24 << r25
              else
                break
              end
            end
            r24 = instantiate_node(SyntaxNode,input, i24...index, s24)
            s20 << r24
            if r24
              r26 = _nt_kwEND
              s20 << r26
              if r26
                r27 = _nt_tSpace
                s20 << r27
                if r27
                  r28 = _nt_kwLOOP
                  s20 << r28
                  if r28
                    r30 = _nt_tSpace
                    if r30
                      r29 = r30
                    else
                      r29 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s20 << r29
                    if r29
                      if has_terminal?(';', false, index)
                        r31 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(';')
                        r31 = nil
                      end
                      s20 << r31
                      if r31
                        r32 = _nt_stubNode
                        s20 << r32
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s20.last
        r20 = instantiate_node(Piggly::Parser::Nodes::Loop,input, i20...index, s20)
        r20.extend(StmtLoop2)
      else
        @index = i20
        r20 = nil
      end
      if r20
        r0 = r20
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:stmtLoop][start_index] = r0

    r0
  end

  module StmtWhileLoop0
    def tSpace
      elements[0]
    end

    def label_close
      elements[1]
    end
  end

  module StmtWhileLoop1
    def label_open
      elements[0]
    end

    def tSpace1
      elements[1]
    end

    def kwWHILE
      elements[2]
    end

    def condSpace
      elements[3]
    end

    def condStub
      elements[4]
    end

    def cond
      elements[5]
    end

    def kwLOOP1
      elements[6]
    end

    def bodySpace
      elements[7]
    end

    def bodyStub
      elements[8]
    end

    def body
      elements[9]
    end

    def kwEND
      elements[10]
    end

    def tSpace2
      elements[11]
    end

    def kwLOOP2
      elements[12]
    end

  end

  module StmtWhileLoop2
    def kwWHILE
      elements[0]
    end

    def condSpace
      elements[1]
    end

    def condStub
      elements[2]
    end

    def cond
      elements[3]
    end

    def kwLOOP1
      elements[4]
    end

    def bodySpace
      elements[5]
    end

    def bodyStub
      elements[6]
    end

    def body
      elements[7]
    end

    def kwEND
      elements[8]
    end

    def tSpace
      elements[9]
    end

    def kwLOOP2
      elements[10]
    end

  end

  def _nt_stmtWhileLoop
    start_index = index
    if node_cache[:stmtWhileLoop].has_key?(index)
      cached = node_cache[:stmtWhileLoop][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_tLabel
    s1 << r2
    if r2
      r3 = _nt_tSpace
      s1 << r3
      if r3
        r4 = _nt_kwWHILE
        s1 << r4
        if r4
          r6 = _nt_tSpace
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r5
          if r5
            r7 = _nt_stubNode
            s1 << r7
            if r7
              r8 = _nt_expressionUntilLoop
              s1 << r8
              if r8
                r9 = _nt_kwLOOP
                s1 << r9
                if r9
                  r10 = _nt_tSpace
                  s1 << r10
                  if r10
                    r11 = _nt_stubNode
                    s1 << r11
                    if r11
                      s12, i12 = [], index
                      loop do
                        r13 = _nt_statement
                        if r13
                          s12 << r13
                        else
                          break
                        end
                      end
                      r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
                      s1 << r12
                      if r12
                        r14 = _nt_kwEND
                        s1 << r14
                        if r14
                          r15 = _nt_tSpace
                          s1 << r15
                          if r15
                            r16 = _nt_kwLOOP
                            s1 << r16
                            if r16
                              i18, s18 = index, []
                              r19 = _nt_tSpace
                              s18 << r19
                              if r19
                                r20 = _nt_tIdentifier
                                s18 << r20
                              end
                              if s18.last
                                r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                                r18.extend(StmtWhileLoop0)
                              else
                                @index = i18
                                r18 = nil
                              end
                              if r18
                                r17 = r18
                              else
                                r17 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s1 << r17
                              if r17
                                r22 = _nt_tSpace
                                if r22
                                  r21 = r22
                                else
                                  r21 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s1 << r21
                                if r21
                                  if has_terminal?(';', false, index)
                                    r23 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                    @index += 1
                                  else
                                    terminal_parse_failure(';')
                                    r23 = nil
                                  end
                                  s1 << r23
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Piggly::Parser::Nodes::WhileLoop,input, i1...index, s1)
      r1.extend(StmtWhileLoop1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i24, s24 = index, []
      r25 = _nt_kwWHILE
      s24 << r25
      if r25
        r27 = _nt_tSpace
        if r27
          r26 = r27
        else
          r26 = instantiate_node(SyntaxNode,input, index...index)
        end
        s24 << r26
        if r26
          r28 = _nt_stubNode
          s24 << r28
          if r28
            r29 = _nt_expressionUntilLoop
            s24 << r29
            if r29
              r30 = _nt_kwLOOP
              s24 << r30
              if r30
                r31 = _nt_tSpace
                s24 << r31
                if r31
                  r32 = _nt_stubNode
                  s24 << r32
                  if r32
                    s33, i33 = [], index
                    loop do
                      r34 = _nt_statement
                      if r34
                        s33 << r34
                      else
                        break
                      end
                    end
                    r33 = instantiate_node(SyntaxNode,input, i33...index, s33)
                    s24 << r33
                    if r33
                      r35 = _nt_kwEND
                      s24 << r35
                      if r35
                        r36 = _nt_tSpace
                        s24 << r36
                        if r36
                          r37 = _nt_kwLOOP
                          s24 << r37
                          if r37
                            r39 = _nt_tSpace
                            if r39
                              r38 = r39
                            else
                              r38 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s24 << r38
                            if r38
                              if has_terminal?(';', false, index)
                                r40 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                @index += 1
                              else
                                terminal_parse_failure(';')
                                r40 = nil
                              end
                              s24 << r40
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s24.last
        r24 = instantiate_node(Piggly::Parser::Nodes::WhileLoop,input, i24...index, s24)
        r24.extend(StmtWhileLoop2)
      else
        @index = i24
        r24 = nil
      end
      if r24
        r0 = r24
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:stmtWhileLoop][start_index] = r0

    r0
  end

  module StmtForLoop0
    def tSpace
      elements[0]
    end

    def label_close
      elements[1]
    end
  end

  module StmtForLoop1
    def label_open
      elements[0]
    end

    def tSpace1
      elements[1]
    end

    def kwFOR
      elements[2]
    end

    def tSpace2
      elements[3]
    end

    def identifierList
      elements[4]
    end

    def tSpace3
      elements[5]
    end

    def kwIN
      elements[6]
    end

    def condSpace
      elements[7]
    end

    def cond
      elements[8]
    end

    def kwLOOP1
      elements[9]
    end

    def bodySpace
      elements[10]
    end

    def bodyStub
      elements[11]
    end

    def body
      elements[12]
    end

    def doneStub
      elements[13]
    end

    def kwEND
      elements[14]
    end

    def tSpace4
      elements[15]
    end

    def kwLOOP2
      elements[16]
    end

    def exitStub
      elements[20]
    end
  end

  module StmtForLoop2
    def kwFOR
      elements[0]
    end

    def tSpace1
      elements[1]
    end

    def identifierList
      elements[2]
    end

    def tSpace2
      elements[3]
    end

    def kwIN
      elements[4]
    end

    def condSpace
      elements[5]
    end

    def cond
      elements[6]
    end

    def kwLOOP1
      elements[7]
    end

    def bodySpace
      elements[8]
    end

    def bodyStub
      elements[9]
    end

    def body
      elements[10]
    end

    def doneStub
      elements[11]
    end

    def kwEND
      elements[12]
    end

    def tSpace3
      elements[13]
    end

    def kwLOOP2
      elements[14]
    end

    def exitStub
      elements[17]
    end
  end

  def _nt_stmtForLoop
    start_index = index
    if node_cache[:stmtForLoop].has_key?(index)
      cached = node_cache[:stmtForLoop][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_tLabel
    s1 << r2
    if r2
      r3 = _nt_tSpace
      s1 << r3
      if r3
        r4 = _nt_kwFOR
        s1 << r4
        if r4
          r5 = _nt_tSpace
          s1 << r5
          if r5
            r6 = _nt_identifierList
            s1 << r6
            if r6
              r7 = _nt_tSpace
              s1 << r7
              if r7
                r8 = _nt_kwIN
                s1 << r8
                if r8
                  r9 = _nt_tSpace
                  s1 << r9
                  if r9
                    i10 = index
                    r11 = _nt_stmtForSql
                    if r11
                      r10 = r11
                    else
                      r12 = _nt_expressionUntilLoop
                      if r12
                        r10 = r12
                      else
                        @index = i10
                        r10 = nil
                      end
                    end
                    s1 << r10
                    if r10
                      r13 = _nt_kwLOOP
                      s1 << r13
                      if r13
                        r14 = _nt_tSpace
                        s1 << r14
                        if r14
                          r15 = _nt_stubNode
                          s1 << r15
                          if r15
                            s16, i16 = [], index
                            loop do
                              r17 = _nt_statement
                              if r17
                                s16 << r17
                              else
                                break
                              end
                            end
                            r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                            s1 << r16
                            if r16
                              r18 = _nt_stubNode
                              s1 << r18
                              if r18
                                r19 = _nt_kwEND
                                s1 << r19
                                if r19
                                  r20 = _nt_tSpace
                                  s1 << r20
                                  if r20
                                    r21 = _nt_kwLOOP
                                    s1 << r21
                                    if r21
                                      i23, s23 = index, []
                                      r24 = _nt_tSpace
                                      s23 << r24
                                      if r24
                                        r25 = _nt_tIdentifier
                                        s23 << r25
                                      end
                                      if s23.last
                                        r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
                                        r23.extend(StmtForLoop0)
                                      else
                                        @index = i23
                                        r23 = nil
                                      end
                                      if r23
                                        r22 = r23
                                      else
                                        r22 = instantiate_node(SyntaxNode,input, index...index)
                                      end
                                      s1 << r22
                                      if r22
                                        r27 = _nt_tSpace
                                        if r27
                                          r26 = r27
                                        else
                                          r26 = instantiate_node(SyntaxNode,input, index...index)
                                        end
                                        s1 << r26
                                        if r26
                                          if has_terminal?(';', false, index)
                                            r28 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                            @index += 1
                                          else
                                            terminal_parse_failure(';')
                                            r28 = nil
                                          end
                                          s1 << r28
                                          if r28
                                            r29 = _nt_stubNode
                                            s1 << r29
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Piggly::Parser::Nodes::ForLoop,input, i1...index, s1)
      r1.extend(StmtForLoop1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i30, s30 = index, []
      r31 = _nt_kwFOR
      s30 << r31
      if r31
        r32 = _nt_tSpace
        s30 << r32
        if r32
          r33 = _nt_identifierList
          s30 << r33
          if r33
            r34 = _nt_tSpace
            s30 << r34
            if r34
              r35 = _nt_kwIN
              s30 << r35
              if r35
                r36 = _nt_tSpace
                s30 << r36
                if r36
                  i37 = index
                  r38 = _nt_stmtForSql
                  if r38
                    r37 = r38
                  else
                    r39 = _nt_expressionUntilLoop
                    if r39
                      r37 = r39
                    else
                      @index = i37
                      r37 = nil
                    end
                  end
                  s30 << r37
                  if r37
                    r40 = _nt_kwLOOP
                    s30 << r40
                    if r40
                      r41 = _nt_tSpace
                      s30 << r41
                      if r41
                        r42 = _nt_stubNode
                        s30 << r42
                        if r42
                          s43, i43 = [], index
                          loop do
                            r44 = _nt_statement
                            if r44
                              s43 << r44
                            else
                              break
                            end
                          end
                          r43 = instantiate_node(SyntaxNode,input, i43...index, s43)
                          s30 << r43
                          if r43
                            r45 = _nt_stubNode
                            s30 << r45
                            if r45
                              r46 = _nt_kwEND
                              s30 << r46
                              if r46
                                r47 = _nt_tSpace
                                s30 << r47
                                if r47
                                  r48 = _nt_kwLOOP
                                  s30 << r48
                                  if r48
                                    r50 = _nt_tSpace
                                    if r50
                                      r49 = r50
                                    else
                                      r49 = instantiate_node(SyntaxNode,input, index...index)
                                    end
                                    s30 << r49
                                    if r49
                                      if has_terminal?(';', false, index)
                                        r51 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                        @index += 1
                                      else
                                        terminal_parse_failure(';')
                                        r51 = nil
                                      end
                                      s30 << r51
                                      if r51
                                        r52 = _nt_stubNode
                                        s30 << r52
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s30.last
        r30 = instantiate_node(Piggly::Parser::Nodes::ForLoop,input, i30...index, s30)
        r30.extend(StmtForLoop2)
      else
        @index = i30
        r30 = nil
      end
      if r30
        r0 = r30
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:stmtForLoop][start_index] = r0

    r0
  end

  module StmtForSql0
    def sqlKeyword
      elements[0]
    end

    def tSpace
      elements[1]
    end

    def expressionUntilLoop
      elements[2]
    end
  end

  def _nt_stmtForSql
    start_index = index
    if node_cache[:stmtForSql].has_key?(index)
      cached = node_cache[:stmtForSql][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_sqlKeyword
    s0 << r1
    if r1
      r2 = _nt_tSpace
      s0 << r2
      if r2
        r3 = _nt_expressionUntilLoop
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::Sql,input, i0...index, s0)
      r0.extend(StmtForSql0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stmtForSql][start_index] = r0

    r0
  end

  module StmtExit0
    def tSpace
      elements[0]
    end

    def label
      elements[1]
    end
  end

  module StmtExit1
    def kwEXIT
      elements[0]
    end

  end

  module StmtExit2
    def bodyStub
      elements[0]
    end

    def body
      elements[1]
    end

  end

  module StmtExit3
    def tSpace
      elements[0]
    end

    def label
      elements[1]
    end
  end

  module StmtExit4
    def kwEXIT
      elements[0]
    end

  end

  module StmtExit5
    def body
      elements[0]
    end

    def tSpace
      elements[1]
    end

    def kwWHEN
      elements[2]
    end

    def condSpace
      elements[3]
    end

    def condStub
      elements[4]
    end

    def cond
      elements[5]
    end

  end

  def _nt_stmtExit
    start_index = index
    if node_cache[:stmtExit].has_key?(index)
      cached = node_cache[:stmtExit][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_stubNode
    s1 << r2
    if r2
      i3, s3 = index, []
      r4 = _nt_kwEXIT
      s3 << r4
      if r4
        i6, s6 = index, []
        r7 = _nt_tSpace
        s6 << r7
        if r7
          r8 = _nt_tIdentifier
          s6 << r8
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(StmtExit0)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(StmtExit1)
      else
        @index = i3
        r3 = nil
      end
      s1 << r3
      if r3
        r10 = _nt_tSpace
        if r10
          r9 = r10
        else
          r9 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r9
        if r9
          if has_terminal?(';', false, index)
            r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(';')
            r11 = nil
          end
          s1 << r11
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Piggly::Parser::Nodes::Exit,input, i1...index, s1)
      r1.extend(StmtExit2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i12, s12 = index, []
      i13, s13 = index, []
      r14 = _nt_kwEXIT
      s13 << r14
      if r14
        i16, s16 = index, []
        r17 = _nt_tSpace
        s16 << r17
        if r17
          r18 = _nt_tIdentifier
          s16 << r18
        end
        if s16.last
          r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
          r16.extend(StmtExit3)
        else
          @index = i16
          r16 = nil
        end
        if r16
          r15 = r16
        else
          r15 = instantiate_node(SyntaxNode,input, index...index)
        end
        s13 << r15
      end
      if s13.last
        r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
        r13.extend(StmtExit4)
      else
        @index = i13
        r13 = nil
      end
      s12 << r13
      if r13
        r19 = _nt_tSpace
        s12 << r19
        if r19
          r20 = _nt_kwWHEN
          s12 << r20
          if r20
            r21 = _nt_tSpace
            s12 << r21
            if r21
              r22 = _nt_stubNode
              s12 << r22
              if r22
                r23 = _nt_expressionUntilSemiColon
                s12 << r23
                if r23
                  if has_terminal?(';', false, index)
                    r24 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(';')
                    r24 = nil
                  end
                  s12 << r24
                end
              end
            end
          end
        end
      end
      if s12.last
        r12 = instantiate_node(Piggly::Parser::Nodes::ExitWhen,input, i12...index, s12)
        r12.extend(StmtExit5)
      else
        @index = i12
        r12 = nil
      end
      if r12
        r0 = r12
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:stmtExit][start_index] = r0

    r0
  end

  module StmtContinue0
    def tSpace
      elements[0]
    end

    def label
      elements[1]
    end
  end

  module StmtContinue1
    def kwCONTINUE
      elements[0]
    end

  end

  module StmtContinue2
    def bodyStub
      elements[0]
    end

    def body
      elements[1]
    end

  end

  module StmtContinue3
    def tSpace
      elements[0]
    end

    def label
      elements[1]
    end
  end

  module StmtContinue4
    def kwCONTINUE
      elements[0]
    end

  end

  module StmtContinue5
    def body
      elements[0]
    end

    def tSpace
      elements[1]
    end

    def kwWHEN
      elements[2]
    end

    def condSpace
      elements[3]
    end

    def condStub
      elements[4]
    end

    def cond
      elements[5]
    end

  end

  def _nt_stmtContinue
    start_index = index
    if node_cache[:stmtContinue].has_key?(index)
      cached = node_cache[:stmtContinue][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_stubNode
    s1 << r2
    if r2
      i3, s3 = index, []
      r4 = _nt_kwCONTINUE
      s3 << r4
      if r4
        i6, s6 = index, []
        r7 = _nt_tSpace
        s6 << r7
        if r7
          r8 = _nt_tIdentifier
          s6 << r8
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(StmtContinue0)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(StmtContinue1)
      else
        @index = i3
        r3 = nil
      end
      s1 << r3
      if r3
        r10 = _nt_tSpace
        if r10
          r9 = r10
        else
          r9 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r9
        if r9
          if has_terminal?(';', false, index)
            r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(';')
            r11 = nil
          end
          s1 << r11
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Piggly::Parser::Nodes::Continue,input, i1...index, s1)
      r1.extend(StmtContinue2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i12, s12 = index, []
      i13, s13 = index, []
      r14 = _nt_kwCONTINUE
      s13 << r14
      if r14
        i16, s16 = index, []
        r17 = _nt_tSpace
        s16 << r17
        if r17
          r18 = _nt_tIdentifier
          s16 << r18
        end
        if s16.last
          r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
          r16.extend(StmtContinue3)
        else
          @index = i16
          r16 = nil
        end
        if r16
          r15 = r16
        else
          r15 = instantiate_node(SyntaxNode,input, index...index)
        end
        s13 << r15
      end
      if s13.last
        r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
        r13.extend(StmtContinue4)
      else
        @index = i13
        r13 = nil
      end
      s12 << r13
      if r13
        r19 = _nt_tSpace
        s12 << r19
        if r19
          r20 = _nt_kwWHEN
          s12 << r20
          if r20
            r21 = _nt_tSpace
            s12 << r21
            if r21
              r22 = _nt_stubNode
              s12 << r22
              if r22
                r23 = _nt_expressionUntilSemiColon
                s12 << r23
                if r23
                  if has_terminal?(';', false, index)
                    r24 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(';')
                    r24 = nil
                  end
                  s12 << r24
                end
              end
            end
          end
        end
      end
      if s12.last
        r12 = instantiate_node(Piggly::Parser::Nodes::ContinueWhen,input, i12...index, s12)
        r12.extend(StmtContinue5)
      else
        @index = i12
        r12 = nil
      end
      if r12
        r0 = r12
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:stmtContinue][start_index] = r0

    r0
  end

  module StmtReturn0
  end

  module StmtReturn1
    def tSpace1
      elements[0]
    end

    def kwNEXT
      elements[1]
    end

    def tSpace2
      elements[2]
    end

    def expressionUntilSemiColon
      elements[3]
    end

  end

  module StmtReturn2
    def tSpace1
      elements[0]
    end

    def kwQUERY
      elements[1]
    end

    def tSpace2
      elements[2]
    end

    def expressionUntilSemiColon
      elements[3]
    end
  end

  module StmtReturn3
    def kwRETURN
      elements[0]
    end

  end

  module StmtReturn4
    def bodyStub
      elements[0]
    end

    def body
      elements[1]
    end

  end

  def _nt_stmtReturn
    start_index = index
    if node_cache[:stmtReturn].has_key?(index)
      cached = node_cache[:stmtReturn][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_stubNode
    s0 << r1
    if r1
      i2, s2 = index, []
      r3 = _nt_kwRETURN
      s2 << r3
      if r3
        i4 = index
        i5, s5 = index, []
        r7 = _nt_tSpace
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s5 << r6
        if r6
          i8 = index
          if has_terminal?(';', false, index)
            r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(';')
            r9 = nil
          end
          if r9
            @index = i8
            r8 = instantiate_node(SyntaxNode,input, index...index)
          else
            r8 = nil
          end
          s5 << r8
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(StmtReturn0)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r4 = r5
        else
          i10, s10 = index, []
          r11 = _nt_tSpace
          s10 << r11
          if r11
            r12 = _nt_kwNEXT
            s10 << r12
            if r12
              r13 = _nt_tSpace
              s10 << r13
              if r13
                r14 = _nt_expressionUntilSemiColon
                s10 << r14
                if r14
                  r16 = _nt_tSpace
                  if r16
                    r15 = r16
                  else
                    r15 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s10 << r15
                end
              end
            end
          end
          if s10.last
            r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
            r10.extend(StmtReturn1)
          else
            @index = i10
            r10 = nil
          end
          if r10
            r4 = r10
          else
            i17, s17 = index, []
            r18 = _nt_tSpace
            s17 << r18
            if r18
              r19 = _nt_kwQUERY
              s17 << r19
              if r19
                r20 = _nt_tSpace
                s17 << r20
                if r20
                  r21 = _nt_expressionUntilSemiColon
                  s17 << r21
                end
              end
            end
            if s17.last
              r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
              r17.extend(StmtReturn2)
            else
              @index = i17
              r17 = nil
            end
            if r17
              r4 = r17
            else
              r22 = _nt_expressionUntilSemiColon
              if r22
                r4 = r22
              else
                @index = i4
                r4 = nil
              end
            end
          end
        end
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(StmtReturn3)
      else
        @index = i2
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?(';', false, index)
          r23 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(';')
          r23 = nil
        end
        s0 << r23
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StmtReturn4)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stmtReturn][start_index] = r0

    r0
  end

  module StmtRaise0
    def kwRAISE
      elements[0]
    end

    def tSpace1
      elements[1]
    end

    def level
      elements[2]
    end

    def tSpace2
      elements[3]
    end

    def expr
      elements[4]
    end
  end

  module StmtRaise1
    def bodyStub
      elements[0]
    end

    def body
      elements[1]
    end

  end

  module StmtRaise2
    def kwRAISE
      elements[0]
    end

    def tSpace1
      elements[1]
    end

    def level
      elements[2]
    end

    def tSpace2
      elements[3]
    end

    def expr
      elements[4]
    end

  end

  def _nt_stmtRaise
    start_index = index
    if node_cache[:stmtRaise].has_key?(index)
      cached = node_cache[:stmtRaise][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_stubNode
    s1 << r2
    if r2
      i3, s3 = index, []
      r4 = _nt_kwRAISE
      s3 << r4
      if r4
        r5 = _nt_tSpace
        s3 << r5
        if r5
          r6 = _nt_kwEXCEPTION
          s3 << r6
          if r6
            r7 = _nt_tSpace
            s3 << r7
            if r7
              r8 = _nt_expressionUntilSemiColon
              s3 << r8
            end
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(StmtRaise0)
      else
        @index = i3
        r3 = nil
      end
      s1 << r3
      if r3
        if has_terminal?(';', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(';')
          r9 = nil
        end
        s1 << r9
      end
    end
    if s1.last
      r1 = instantiate_node(Piggly::Parser::Nodes::Throw,input, i1...index, s1)
      r1.extend(StmtRaise1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i10, s10 = index, []
      r11 = _nt_kwRAISE
      s10 << r11
      if r11
        r12 = _nt_tSpace
        s10 << r12
        if r12
          i13 = index
          r14 = _nt_kwWARNING
          if r14
            r13 = r14
          else
            r15 = _nt_kwNOTICE
            if r15
              r13 = r15
            else
              r16 = _nt_kwINFO
              if r16
                r13 = r16
              else
                r17 = _nt_kwLOG
                if r17
                  r13 = r17
                else
                  r18 = _nt_kwDEBUG
                  if r18
                    r13 = r18
                  else
                    @index = i13
                    r13 = nil
                  end
                end
              end
            end
          end
          s10 << r13
          if r13
            r19 = _nt_tSpace
            s10 << r19
            if r19
              r20 = _nt_expressionUntilSemiColon
              s10 << r20
              if r20
                if has_terminal?(';', false, index)
                  r21 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(';')
                  r21 = nil
                end
                s10 << r21
              end
            end
          end
        end
      end
      if s10.last
        r10 = instantiate_node(Piggly::Parser::Nodes::Raise,input, i10...index, s10)
        r10.extend(StmtRaise2)
      else
        @index = i10
        r10 = nil
      end
      if r10
        r0 = r10
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:stmtRaise][start_index] = r0

    r0
  end

  module StmtExecSql0
    def sqlKeyword
      elements[0]
    end

    def tSpace
      elements[1]
    end

    def expressionUntilSemiColon
      elements[2]
    end

  end

  def _nt_stmtExecSql
    start_index = index
    if node_cache[:stmtExecSql].has_key?(index)
      cached = node_cache[:stmtExecSql][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_sqlKeyword
    s0 << r1
    if r1
      r2 = _nt_tSpace
      s0 << r2
      if r2
        r3 = _nt_expressionUntilSemiColon
        s0 << r3
        if r3
          if has_terminal?(';', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(';')
            r4 = nil
          end
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::Sql,input, i0...index, s0)
      r0.extend(StmtExecSql0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stmtExecSql][start_index] = r0

    r0
  end

  module StmtDynamicExecute0
    def kwEXECUTE
      elements[0]
    end

    def tSpace
      elements[1]
    end

    def expressionUntilSemiColon
      elements[2]
    end

  end

  def _nt_stmtDynamicExecute
    start_index = index
    if node_cache[:stmtDynamicExecute].has_key?(index)
      cached = node_cache[:stmtDynamicExecute][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_kwEXECUTE
    s0 << r1
    if r1
      r2 = _nt_tSpace
      s0 << r2
      if r2
        r3 = _nt_expressionUntilSemiColon
        s0 << r3
        if r3
          if has_terminal?(';', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(';')
            r4 = nil
          end
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StmtDynamicExecute0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stmtDynamicExecute][start_index] = r0

    r0
  end

  module StmtPerform0
    def kwPERFORM
      elements[0]
    end

    def tSpace
      elements[1]
    end

    def expressionUntilSemiColon
      elements[2]
    end

  end

  def _nt_stmtPerform
    start_index = index
    if node_cache[:stmtPerform].has_key?(index)
      cached = node_cache[:stmtPerform][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_kwPERFORM
    s0 << r1
    if r1
      r2 = _nt_tSpace
      s0 << r2
      if r2
        r3 = _nt_expressionUntilSemiColon
        s0 << r3
        if r3
          if has_terminal?(';', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(';')
            r4 = nil
          end
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StmtPerform0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stmtPerform][start_index] = r0

    r0
  end

  module StmtOpen0
    def kwOPEN
      elements[0]
    end

    def notImplemented
      elements[1]
    end
  end

  def _nt_stmtOpen
    start_index = index
    if node_cache[:stmtOpen].has_key?(index)
      cached = node_cache[:stmtOpen][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_kwOPEN
    s0 << r1
    if r1
      r2 = _nt_notImplemented
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StmtOpen0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stmtOpen][start_index] = r0

    r0
  end

  module StmtFetch0
    def kwFETCH
      elements[0]
    end

    def notImplemented
      elements[1]
    end
  end

  def _nt_stmtFetch
    start_index = index
    if node_cache[:stmtFetch].has_key?(index)
      cached = node_cache[:stmtFetch][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_kwFETCH
    s0 << r1
    if r1
      r2 = _nt_notImplemented
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StmtFetch0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stmtFetch][start_index] = r0

    r0
  end

  module StmtMove0
    def kwMOVE
      elements[0]
    end

    def notImplemented
      elements[1]
    end
  end

  def _nt_stmtMove
    start_index = index
    if node_cache[:stmtMove].has_key?(index)
      cached = node_cache[:stmtMove][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_kwMOVE
    s0 << r1
    if r1
      r2 = _nt_notImplemented
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StmtMove0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stmtMove][start_index] = r0

    r0
  end

  module StmtClose0
    def kwCLOSE
      elements[0]
    end

    def notImplemented
      elements[1]
    end
  end

  def _nt_stmtClose
    start_index = index
    if node_cache[:stmtClose].has_key?(index)
      cached = node_cache[:stmtClose][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_kwCLOSE
    s0 << r1
    if r1
      r2 = _nt_notImplemented
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StmtClose0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stmtClose][start_index] = r0

    r0
  end

  module StmtGetDiag0
    def kwGET
      elements[0]
    end

    def tSpace1
      elements[1]
    end

    def kwPERFORM
      elements[2]
    end

    def tSpace2
      elements[3]
    end

    def notImplemented
      elements[4]
    end
  end

  def _nt_stmtGetDiag
    start_index = index
    if node_cache[:stmtGetDiag].has_key?(index)
      cached = node_cache[:stmtGetDiag][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_kwGET
    s0 << r1
    if r1
      r2 = _nt_tSpace
      s0 << r2
      if r2
        r3 = _nt_kwPERFORM
        s0 << r3
        if r3
          r4 = _nt_tSpace
          s0 << r4
          if r4
            r5 = _nt_notImplemented
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StmtGetDiag0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stmtGetDiag][start_index] = r0

    r0
  end

  module StmtNull0
    def kwNULL
      elements[0]
    end

  end

  def _nt_stmtNull
    start_index = index
    if node_cache[:stmtNull].has_key?(index)
      cached = node_cache[:stmtNull][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_kwNULL
    s0 << r1
    if r1
      r3 = _nt_tSpace
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        if has_terminal?(';', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(';')
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StmtNull0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stmtNull][start_index] = r0

    r0
  end

  module StmtDeclare0
    def kwDECLARE
      elements[0]
    end

    def tSpace
      elements[1]
    end

  end

  def _nt_stmtDeclare
    start_index = index
    if node_cache[:stmtDeclare].has_key?(index)
      cached = node_cache[:stmtDeclare][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_kwDECLARE
    s0 << r1
    if r1
      r2 = _nt_tSpace
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          r4 = _nt_varDeclaration
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StmtDeclare0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stmtDeclare][start_index] = r0

    r0
  end

  module VarDeclaration0
    def kwCONSTANT
      elements[0]
    end

    def tSpace
      elements[1]
    end
  end

  module VarDeclaration1
    def tSpace1
      elements[0]
    end

    def kwNOT
      elements[1]
    end

    def tSpace2
      elements[2]
    end

    def kwNULL
      elements[3]
    end
  end

  module VarDeclaration2
    def tSpace
      elements[0]
    end

    def kwASSIGN
      elements[1]
    end

    def rval
      elements[3]
    end
  end

  module VarDeclaration3
    def name
      elements[0]
    end

    def tSpace
      elements[1]
    end

    def type
      elements[3]
    end

  end

  def _nt_varDeclaration
    start_index = index
    if node_cache[:varDeclaration].has_key?(index)
      cached = node_cache[:varDeclaration][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_tIdentifier
    s0 << r1
    if r1
      r2 = _nt_tSpace
      s0 << r2
      if r2
        i4, s4 = index, []
        r5 = _nt_kwCONSTANT
        s4 << r5
        if r5
          r6 = _nt_tSpace
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(VarDeclaration0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          r7 = _nt_tType
          s0 << r7
          if r7
            i9, s9 = index, []
            r10 = _nt_tSpace
            s9 << r10
            if r10
              r11 = _nt_kwNOT
              s9 << r11
              if r11
                r12 = _nt_tSpace
                s9 << r12
                if r12
                  r13 = _nt_kwNULL
                  s9 << r13
                end
              end
            end
            if s9.last
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              r9.extend(VarDeclaration1)
            else
              @index = i9
              r9 = nil
            end
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r8
            if r8
              i15, s15 = index, []
              r16 = _nt_tSpace
              s15 << r16
              if r16
                r17 = _nt_kwASSIGN
                s15 << r17
                if r17
                  r19 = _nt_tSpace
                  if r19
                    r18 = r19
                  else
                    r18 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s15 << r18
                  if r18
                    r20 = _nt_expressionUntilSemiColon
                    s15 << r20
                  end
                end
              end
              if s15.last
                r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
                r15.extend(VarDeclaration2)
              else
                @index = i15
                r15 = nil
              end
              if r15
                r14 = r15
              else
                r14 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r14
              if r14
                r22 = _nt_tSpace
                if r22
                  r21 = r22
                else
                  r21 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r21
                if r21
                  if has_terminal?(';', false, index)
                    r23 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(';')
                    r23 = nil
                  end
                  s0 << r23
                  if r23
                    r25 = _nt_tSpace
                    if r25
                      r24 = r25
                    else
                      r24 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r24
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VarDeclaration3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:varDeclaration][start_index] = r0

    r0
  end

  module IdentifierList0
    def tIdentifier
      elements[3]
    end
  end

  module IdentifierList1
    def tIdentifier
      elements[0]
    end

  end

  def _nt_identifierList
    start_index = index
    if node_cache[:identifierList].has_key?(index)
      cached = node_cache[:identifierList][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_tIdentifier
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_tSpace
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if has_terminal?(',', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r6 = nil
          end
          s3 << r6
          if r6
            r8 = _nt_tSpace
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r7
            if r7
              r9 = _nt_tIdentifier
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(IdentifierList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IdentifierList1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:identifierList][start_index] = r0

    r0
  end

  module BlockExceptions0
    def kwEXCEPTION
      elements[0]
    end

    def tSpace
      elements[1]
    end

    def cases
      elements[2]
    end
  end

  def _nt_blockExceptions
    start_index = index
    if node_cache[:blockExceptions].has_key?(index)
      cached = node_cache[:blockExceptions][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_kwEXCEPTION
    s0 << r1
    if r1
      r2 = _nt_tSpace
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          r4 = _nt_exceptionCase
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BlockExceptions0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:blockExceptions][start_index] = r0

    r0
  end

  module ExceptionCase0
    def kwWHEN
      elements[0]
    end

    def condSpace
      elements[1]
    end

    def cond
      elements[2]
    end

    def kwTHEN
      elements[3]
    end

    def bodySpace
      elements[4]
    end

    def bodyStub
      elements[5]
    end

    def body
      elements[6]
    end
  end

  def _nt_exceptionCase
    start_index = index
    if node_cache[:exceptionCase].has_key?(index)
      cached = node_cache[:exceptionCase][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_kwWHEN
    s0 << r1
    if r1
      r2 = _nt_tSpace
      s0 << r2
      if r2
        r3 = _nt_expressionUntilThen
        s0 << r3
        if r3
          r4 = _nt_kwTHEN
          s0 << r4
          if r4
            r5 = _nt_tSpace
            s0 << r5
            if r5
              r6 = _nt_stubNode
              s0 << r6
              if r6
                s7, i7 = [], index
                loop do
                  r8 = _nt_statement
                  if r8
                    s7 << r8
                  else
                    break
                  end
                end
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                s0 << r7
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::Catch,input, i0...index, s0)
      r0.extend(ExceptionCase0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:exceptionCase][start_index] = r0

    r0
  end

  module CaseWhen0
    def kwWHEN
      elements[0]
    end

    def condSpace
      elements[1]
    end

    def cond
      elements[2]
    end

    def kwTHEN
      elements[3]
    end

    def bodySpace
      elements[4]
    end

    def bodyStub
      elements[5]
    end

    def body
      elements[6]
    end
  end

  def _nt_caseWhen
    start_index = index
    if node_cache[:caseWhen].has_key?(index)
      cached = node_cache[:caseWhen][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_kwWHEN
    s0 << r1
    if r1
      r2 = _nt_tSpace
      s0 << r2
      if r2
        r3 = _nt_expressionUntilThen
        s0 << r3
        if r3
          r4 = _nt_kwTHEN
          s0 << r4
          if r4
            r5 = _nt_tSpace
            s0 << r5
            if r5
              r6 = _nt_stubNode
              s0 << r6
              if r6
                s7, i7 = [], index
                loop do
                  r8 = _nt_statement
                  if r8
                    s7 << r8
                  else
                    break
                  end
                end
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                s0 << r7
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::Case,input, i0...index, s0)
      r0.extend(CaseWhen0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:caseWhen][start_index] = r0

    r0
  end

  module CondWhen0
    def kwWHEN
      elements[0]
    end

    def condSpace
      elements[1]
    end

    def condStub
      elements[2]
    end

    def cond
      elements[3]
    end

    def kwTHEN
      elements[4]
    end

    def bodySpace
      elements[5]
    end

    def bodyStub
      elements[6]
    end

    def body
      elements[7]
    end
  end

  def _nt_condWhen
    start_index = index
    if node_cache[:condWhen].has_key?(index)
      cached = node_cache[:condWhen][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_kwWHEN
    s0 << r1
    if r1
      r2 = _nt_tSpace
      s0 << r2
      if r2
        r3 = _nt_stubNode
        s0 << r3
        if r3
          r4 = _nt_expressionUntilThen
          s0 << r4
          if r4
            r5 = _nt_kwTHEN
            s0 << r5
            if r5
              r6 = _nt_tSpace
              s0 << r6
              if r6
                r7 = _nt_stubNode
                s0 << r7
                if r7
                  s8, i8 = [], index
                  loop do
                    r9 = _nt_statement
                    if r9
                      s8 << r9
                    else
                      break
                    end
                  end
                  r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                  s0 << r8
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::Cond,input, i0...index, s0)
      r0.extend(CondWhen0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:condWhen][start_index] = r0

    r0
  end

  module ExpressionUntilSemiColon0
    def tSpace
      elements[0]
    end

  end

  module ExpressionUntilSemiColon1
  end

  module ExpressionUntilSemiColon2
    def head
      elements[0]
    end

    def expr
      elements[1]
    end

    def tail
      elements[2]
    end

  end

  def _nt_expressionUntilSemiColon
    start_index = index
    if node_cache[:expressionUntilSemiColon].has_key?(index)
      cached = node_cache[:expressionUntilSemiColon][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_tSpace
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        i4 = index
        r5 = _nt_tString
        if r5
          r4 = r5
        else
          r6 = _nt_skipWords
          if r6
            r4 = r6
          else
            i7, s7 = index, []
            r8 = _nt_tSpace
            s7 << r8
            if r8
              i9 = index
              if has_terminal?(';', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(';')
                r10 = nil
              end
              if r10
                r9 = nil
              else
                @index = i9
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s7 << r9
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(ExpressionUntilSemiColon0)
            else
              @index = i7
              r7 = nil
            end
            if r7
              r4 = r7
            else
              i11, s11 = index, []
              i12 = index
              r13 = _nt_tSpace
              if r13
                r12 = nil
              else
                @index = i12
                r12 = instantiate_node(SyntaxNode,input, index...index)
              end
              s11 << r12
              if r12
                if has_terminal?('\G[^;]', true, index)
                  r14 = true
                  @index += 1
                else
                  r14 = nil
                end
                s11 << r14
              end
              if s11.last
                r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                r11.extend(ExpressionUntilSemiColon1)
              else
                @index = i11
                r11 = nil
              end
              if r11
                r4 = r11
              else
                @index = i4
                r4 = nil
              end
            end
          end
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
      if r3
        r16 = _nt_tSpace
        if r16
          r15 = r16
        else
          r15 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r15
        if r15
          i17 = index
          if has_terminal?(';', false, index)
            r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(';')
            r18 = nil
          end
          if r18
            @index = i17
            r17 = instantiate_node(SyntaxNode,input, index...index)
          else
            r17 = nil
          end
          s0 << r17
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::Expression,input, i0...index, s0)
      r0.extend(ExpressionUntilSemiColon2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:expressionUntilSemiColon][start_index] = r0

    r0
  end

  module ExpressionUntilClosingBracket0
    def tSpace
      elements[0]
    end

  end

  module ExpressionUntilClosingBracket1
  end

  module ExpressionUntilClosingBracket2
    def head
      elements[0]
    end

    def expr
      elements[1]
    end

    def tail
      elements[2]
    end

  end

  def _nt_expressionUntilClosingBracket
    start_index = index
    if node_cache[:expressionUntilClosingBracket].has_key?(index)
      cached = node_cache[:expressionUntilClosingBracket][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_tSpace
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        i4 = index
        r5 = _nt_tString
        if r5
          r4 = r5
        else
          r6 = _nt_skipWords
          if r6
            r4 = r6
          else
            i7, s7 = index, []
            r8 = _nt_tSpace
            s7 << r8
            if r8
              i9 = index
              if has_terminal?(']', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(']')
                r10 = nil
              end
              if r10
                r9 = nil
              else
                @index = i9
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s7 << r9
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(ExpressionUntilClosingBracket0)
            else
              @index = i7
              r7 = nil
            end
            if r7
              r4 = r7
            else
              i11, s11 = index, []
              i12 = index
              r13 = _nt_tSpace
              if r13
                r12 = nil
              else
                @index = i12
                r12 = instantiate_node(SyntaxNode,input, index...index)
              end
              s11 << r12
              if r12
                if has_terminal?('\G[^\\]]', true, index)
                  r14 = true
                  @index += 1
                else
                  r14 = nil
                end
                s11 << r14
              end
              if s11.last
                r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                r11.extend(ExpressionUntilClosingBracket1)
              else
                @index = i11
                r11 = nil
              end
              if r11
                r4 = r11
              else
                @index = i4
                r4 = nil
              end
            end
          end
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s0 << r3
      if r3
        r16 = _nt_tSpace
        if r16
          r15 = r16
        else
          r15 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r15
        if r15
          i17 = index
          if has_terminal?(']', false, index)
            r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(']')
            r18 = nil
          end
          if r18
            @index = i17
            r17 = instantiate_node(SyntaxNode,input, index...index)
          else
            r17 = nil
          end
          s0 << r17
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::Expression,input, i0...index, s0)
      r0.extend(ExpressionUntilClosingBracket2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:expressionUntilClosingBracket][start_index] = r0

    r0
  end

  module ExpressionUntilThen0
    def tSpace
      elements[0]
    end

  end

  module ExpressionUntilThen1
  end

  module ExpressionUntilThen2
    def head
      elements[0]
    end

    def expr
      elements[1]
    end

    def tail
      elements[2]
    end

  end

  def _nt_expressionUntilThen
    start_index = index
    if node_cache[:expressionUntilThen].has_key?(index)
      cached = node_cache[:expressionUntilThen][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_tSpace
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        i4 = index
        r5 = _nt_tString
        if r5
          r4 = r5
        else
          r6 = _nt_skipWords
          if r6
            r4 = r6
          else
            i7, s7 = index, []
            r8 = _nt_tSpace
            s7 << r8
            if r8
              i9 = index
              r10 = _nt_kwTHEN
              if r10
                r9 = nil
              else
                @index = i9
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s7 << r9
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(ExpressionUntilThen0)
            else
              @index = i7
              r7 = nil
            end
            if r7
              r4 = r7
            else
              i11, s11 = index, []
              i12 = index
              r13 = _nt_tSpace
              if r13
                r12 = nil
              else
                @index = i12
                r12 = instantiate_node(SyntaxNode,input, index...index)
              end
              s11 << r12
              if r12
                i14 = index
                r15 = _nt_kwTHEN
                if r15
                  r14 = nil
                else
                  @index = i14
                  r14 = instantiate_node(SyntaxNode,input, index...index)
                end
                s11 << r14
                if r14
                  if index < input_length
                    r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure("any character")
                    r16 = nil
                  end
                  s11 << r16
                end
              end
              if s11.last
                r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                r11.extend(ExpressionUntilThen1)
              else
                @index = i11
                r11 = nil
              end
              if r11
                r4 = r11
              else
                @index = i4
                r4 = nil
              end
            end
          end
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s0 << r3
      if r3
        r17 = _nt_tSpace
        s0 << r17
        if r17
          i18 = index
          r19 = _nt_kwTHEN
          if r19
            @index = i18
            r18 = instantiate_node(SyntaxNode,input, index...index)
          else
            r18 = nil
          end
          s0 << r18
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::Expression,input, i0...index, s0)
      r0.extend(ExpressionUntilThen2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:expressionUntilThen][start_index] = r0

    r0
  end

  module ExpressionUntilWhen0
    def tSpace
      elements[0]
    end

  end

  module ExpressionUntilWhen1
  end

  module ExpressionUntilWhen2
    def head
      elements[0]
    end

    def expr
      elements[1]
    end

    def tail
      elements[2]
    end

  end

  def _nt_expressionUntilWhen
    start_index = index
    if node_cache[:expressionUntilWhen].has_key?(index)
      cached = node_cache[:expressionUntilWhen][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_tSpace
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        i4 = index
        r5 = _nt_tString
        if r5
          r4 = r5
        else
          r6 = _nt_skipWords
          if r6
            r4 = r6
          else
            i7, s7 = index, []
            r8 = _nt_tSpace
            s7 << r8
            if r8
              i9 = index
              r10 = _nt_kwWHEN
              if r10
                r9 = nil
              else
                @index = i9
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s7 << r9
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(ExpressionUntilWhen0)
            else
              @index = i7
              r7 = nil
            end
            if r7
              r4 = r7
            else
              i11, s11 = index, []
              i12 = index
              r13 = _nt_tSpace
              if r13
                r12 = nil
              else
                @index = i12
                r12 = instantiate_node(SyntaxNode,input, index...index)
              end
              s11 << r12
              if r12
                i14 = index
                r15 = _nt_kwWHEN
                if r15
                  r14 = nil
                else
                  @index = i14
                  r14 = instantiate_node(SyntaxNode,input, index...index)
                end
                s11 << r14
                if r14
                  if index < input_length
                    r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure("any character")
                    r16 = nil
                  end
                  s11 << r16
                end
              end
              if s11.last
                r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                r11.extend(ExpressionUntilWhen1)
              else
                @index = i11
                r11 = nil
              end
              if r11
                r4 = r11
              else
                @index = i4
                r4 = nil
              end
            end
          end
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s0 << r3
      if r3
        r17 = _nt_tSpace
        s0 << r17
        if r17
          i18 = index
          r19 = _nt_kwWHEN
          if r19
            @index = i18
            r18 = instantiate_node(SyntaxNode,input, index...index)
          else
            r18 = nil
          end
          s0 << r18
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::Expression,input, i0...index, s0)
      r0.extend(ExpressionUntilWhen2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:expressionUntilWhen][start_index] = r0

    r0
  end

  module ExpressionUntilLoop0
    def tSpace
      elements[0]
    end

  end

  module ExpressionUntilLoop1
  end

  module ExpressionUntilLoop2
    def head
      elements[0]
    end

    def expr
      elements[1]
    end

    def tail
      elements[2]
    end

  end

  def _nt_expressionUntilLoop
    start_index = index
    if node_cache[:expressionUntilLoop].has_key?(index)
      cached = node_cache[:expressionUntilLoop][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_tSpace
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        i4 = index
        r5 = _nt_tString
        if r5
          r4 = r5
        else
          r6 = _nt_skipWords
          if r6
            r4 = r6
          else
            i7, s7 = index, []
            r8 = _nt_tSpace
            s7 << r8
            if r8
              i9 = index
              r10 = _nt_kwLOOP
              if r10
                r9 = nil
              else
                @index = i9
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s7 << r9
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(ExpressionUntilLoop0)
            else
              @index = i7
              r7 = nil
            end
            if r7
              r4 = r7
            else
              i11, s11 = index, []
              i12 = index
              r13 = _nt_tSpace
              if r13
                r12 = nil
              else
                @index = i12
                r12 = instantiate_node(SyntaxNode,input, index...index)
              end
              s11 << r12
              if r12
                i14 = index
                r15 = _nt_kwLOOP
                if r15
                  r14 = nil
                else
                  @index = i14
                  r14 = instantiate_node(SyntaxNode,input, index...index)
                end
                s11 << r14
                if r14
                  if index < input_length
                    r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure("any character")
                    r16 = nil
                  end
                  s11 << r16
                end
              end
              if s11.last
                r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                r11.extend(ExpressionUntilLoop1)
              else
                @index = i11
                r11 = nil
              end
              if r11
                r4 = r11
              else
                @index = i4
                r4 = nil
              end
            end
          end
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s0 << r3
      if r3
        r17 = _nt_tSpace
        s0 << r17
        if r17
          i18 = index
          r19 = _nt_kwLOOP
          if r19
            @index = i18
            r18 = instantiate_node(SyntaxNode,input, index...index)
          else
            r18 = nil
          end
          s0 << r18
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::Expression,input, i0...index, s0)
      r0.extend(ExpressionUntilLoop2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:expressionUntilLoop][start_index] = r0

    r0
  end

  def _nt_skipWords
    start_index = index
    if node_cache[:skipWords].has_key?(index)
      cached = node_cache[:skipWords][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[a-z0-9_]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Piggly::Parser::Nodes::TextNode,input, i0...index, s0)
    end

    node_cache[:skipWords][start_index] = r0

    r0
  end

  def _nt_ws
    start_index = index
    if node_cache[:ws].has_key?(index)
      cached = node_cache[:ws][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[ \\t\\n\\v\\f\\r]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Piggly::Parser::Nodes::TextNode,input, i0...index, s0)
    end

    node_cache[:ws][start_index] = r0

    r0
  end

  module DollarQuoteMarker0
  end

  module DollarQuoteMarker1
    def tag
      elements[1]
    end

  end

  def _nt_dollarQuoteMarker
    start_index = index
    if node_cache[:dollarQuoteMarker].has_key?(index)
      cached = node_cache[:dollarQuoteMarker][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('$', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('$')
      r1 = nil
    end
    s0 << r1
    if r1
      i3, s3 = index, []
      if has_terminal?('\G[a-z\\200-\\377_]', true, index)
        r4 = true
        @index += 1
      else
        r4 = nil
      end
      s3 << r4
      if r4
        s5, i5 = [], index
        loop do
          if has_terminal?('\G[a-z\\200-\\377_0-9]', true, index)
            r6 = true
            @index += 1
          else
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(DollarQuoteMarker0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        if has_terminal?('$', false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('$')
          r7 = nil
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TDollarQuoteMarker,input, i0...index, s0)
      r0.extend(DollarQuoteMarker1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:dollarQuoteMarker][start_index] = r0

    r0
  end

  def _nt_stubNode
    start_index = index
    if node_cache[:stubNode].has_key?(index)
      cached = node_cache[:stubNode][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('', false, index)
      r0 = instantiate_node(Piggly::Parser::Nodes::StubNode,input, index...(index + 0))
      @index += 0
    else
      terminal_parse_failure('')
      r0 = nil
    end

    node_cache[:stubNode][start_index] = r0

    r0
  end

  def _nt_notImplemented
    start_index = index
    if node_cache[:notImplemented].has_key?(index)
      cached = node_cache[:notImplemented][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('', false, index)
      r0 = instantiate_node(Piggly::Parser::Nodes::NotImplemented,input, index...(index + 0))
      @index += 0
    else
      terminal_parse_failure('')
      r0 = nil
    end

    node_cache[:notImplemented][start_index] = r0

    r0
  end

  module LValue0
    def expressionUntilClosingBracket
      elements[1]
    end

  end

  module LValue1
    def lValue
      elements[1]
    end
  end

  module LValue2
    def tIdentifier
      elements[0]
    end

    def sub
      elements[1]
    end

    def next
      elements[2]
    end
  end

  module LValue3
    def expressionUntilClosingBracket
      elements[1]
    end

  end

  module LValue4
    def tIdentifier
      elements[0]
    end

    def sub
      elements[1]
    end
  end

  module LValue5
    def lValue
      elements[1]
    end
  end

  module LValue6
    def tIdentifier
      elements[0]
    end

    def next
      elements[1]
    end
  end

  module LValue7
    def tIdentifier
      elements[0]
    end

    def x
      elements[1]
    end
  end

  def _nt_lValue
    start_index = index
    if node_cache[:lValue].has_key?(index)
      cached = node_cache[:lValue][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_tIdentifier
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        if has_terminal?('[', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('[')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_expressionUntilClosingBracket
          s4 << r6
          if r6
            if has_terminal?(']', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(']')
              r7 = nil
            end
            s4 << r7
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(LValue0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
      if r3
        s8, i8 = [], index
        loop do
          i9, s9 = index, []
          if has_terminal?('.', false, index)
            r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('.')
            r10 = nil
          end
          s9 << r10
          if r10
            r11 = _nt_lValue
            s9 << r11
          end
          if s9.last
            r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
            r9.extend(LValue1)
          else
            @index = i9
            r9 = nil
          end
          if r9
            s8 << r9
          else
            break
          end
        end
        if s8.empty?
          @index = i8
          r8 = nil
        else
          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        end
        s1 << r8
      end
    end
    if s1.last
      r1 = instantiate_node(Piggly::Parser::Nodes::Assignable,input, i1...index, s1)
      r1.extend(LValue2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i12, s12 = index, []
      r13 = _nt_tIdentifier
      s12 << r13
      if r13
        s14, i14 = [], index
        loop do
          i15, s15 = index, []
          if has_terminal?('[', false, index)
            r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('[')
            r16 = nil
          end
          s15 << r16
          if r16
            r17 = _nt_expressionUntilClosingBracket
            s15 << r17
            if r17
              if has_terminal?(']', false, index)
                r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(']')
                r18 = nil
              end
              s15 << r18
            end
          end
          if s15.last
            r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
            r15.extend(LValue3)
          else
            @index = i15
            r15 = nil
          end
          if r15
            s14 << r15
          else
            break
          end
        end
        if s14.empty?
          @index = i14
          r14 = nil
        else
          r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
        end
        s12 << r14
      end
      if s12.last
        r12 = instantiate_node(Piggly::Parser::Nodes::Assignable,input, i12...index, s12)
        r12.extend(LValue4)
      else
        @index = i12
        r12 = nil
      end
      if r12
        r0 = r12
      else
        i19, s19 = index, []
        r20 = _nt_tIdentifier
        s19 << r20
        if r20
          s21, i21 = [], index
          loop do
            i22, s22 = index, []
            if has_terminal?('.', false, index)
              r23 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('.')
              r23 = nil
            end
            s22 << r23
            if r23
              r24 = _nt_lValue
              s22 << r24
            end
            if s22.last
              r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
              r22.extend(LValue5)
            else
              @index = i22
              r22 = nil
            end
            if r22
              s21 << r22
            else
              break
            end
          end
          if s21.empty?
            @index = i21
            r21 = nil
          else
            r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
          end
          s19 << r21
        end
        if s19.last
          r19 = instantiate_node(Piggly::Parser::Nodes::Assignable,input, i19...index, s19)
          r19.extend(LValue6)
        else
          @index = i19
          r19 = nil
        end
        if r19
          r0 = r19
        else
          i25, s25 = index, []
          r26 = _nt_tIdentifier
          s25 << r26
          if r26
            if has_terminal?('', false, index)
              r27 = instantiate_node(SyntaxNode,input, index...(index + 0))
              @index += 0
            else
              terminal_parse_failure('')
              r27 = nil
            end
            s25 << r27
          end
          if s25.last
            r25 = instantiate_node(Piggly::Parser::Nodes::Assignable,input, i25...index, s25)
            r25.extend(LValue7)
          else
            @index = i25
            r25 = nil
          end
          if r25
            r0 = r25
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:lValue][start_index] = r0

    r0
  end

  def _nt_tEOF
    start_index = index
    if node_cache[:tEOF].has_key?(index)
      cached = node_cache[:tEOF][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if index < input_length
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("any character")
      r1 = nil
    end
    if r1
      r0 = nil
    else
      @index = i0
      r0 = instantiate_node(SyntaxNode,input, index...index)
    end

    node_cache[:tEOF][start_index] = r0

    r0
  end

  module TLabel0
    def name
      elements[2]
    end

  end

  def _nt_tLabel
    start_index = index
    if node_cache[:tLabel].has_key?(index)
      cached = node_cache[:tLabel][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('<<', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('<<')
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_tSpace
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r4 = _nt_tIdentifier
        s0 << r4
        if r4
          r6 = _nt_tSpace
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            if has_terminal?('>>', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('>>')
              r7 = nil
            end
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TLabel,input, i0...index, s0)
      r0.extend(TLabel0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tLabel][start_index] = r0

    r0
  end

  module TIdentifier0
  end

  module TIdentifier1
  end

  module TIdentifier2
  end

  def _nt_tIdentifier
    start_index = index
    if node_cache[:tIdentifier].has_key?(index)
      cached = node_cache[:tIdentifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    s1, i1 = [], index
    loop do
      i2, s2 = index, []
      if has_terminal?('"', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('"')
        r3 = nil
      end
      s2 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[^"]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s2 << r4
        if r4
          if has_terminal?('"', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('"')
            r6 = nil
          end
          s2 << r6
        end
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(TIdentifier0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(Piggly::Parser::Nodes::TIdentifier,input, i1...index, s1)
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      i8 = index
      r9 = _nt_keyword
      if r9
        r8 = nil
      else
        @index = i8
        r8 = instantiate_node(SyntaxNode,input, index...index)
      end
      s7 << r8
      if r8
        i10, s10 = index, []
        if has_terminal?('\G[a-z\\200-\\377_]', true, index)
          r11 = true
          @index += 1
        else
          r11 = nil
        end
        s10 << r11
        if r11
          s12, i12 = [], index
          loop do
            if has_terminal?('\G[a-z\\200-\\377_0-9$]', true, index)
              r13 = true
              @index += 1
            else
              r13 = nil
            end
            if r13
              s12 << r13
            else
              break
            end
          end
          r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
          s10 << r12
        end
        if s10.last
          r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
          r10.extend(TIdentifier1)
        else
          @index = i10
          r10 = nil
        end
        s7 << r10
      end
      if s7.last
        r7 = instantiate_node(Piggly::Parser::Nodes::TIdentifier,input, i7...index, s7)
        r7.extend(TIdentifier2)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:tIdentifier][start_index] = r0

    r0
  end

  module TString0
  end

  module TString1
    def openTag
      elements[0]
    end

    def content
      elements[1]
    end

    def closeTag
      elements[2]
    end
  end

  module TString2
    def content
      elements[1]
    end

  end

  module TString3
    def content
      elements[1]
    end

  end

  def _nt_tString
    start_index = index
    if node_cache[:tString].has_key?(index)
      cached = node_cache[:tString][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_dollarQuoteMarker
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        i5 = index
        r6 = _nt_dollarQuoteMarker
        if r6
          r5 = nil
        else
          @index = i5
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if index < input_length
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r7 = nil
          end
          s4 << r7
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(TString0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
      if r3
        r8 = _nt_dollarQuoteMarker
        s1 << r8
      end
    end
    if s1.last
      r1 = instantiate_node(Piggly::Parser::Nodes::TString,input, i1...index, s1)
      r1.extend(TString1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i9, s9 = index, []
      if has_terminal?("E'", false, index)
        r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure("E'")
        r10 = nil
      end
      s9 << r10
      if r10
        s11, i11 = [], index
        loop do
          i12 = index
          if has_terminal?("''", false, index)
            r13 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("''")
            r13 = nil
          end
          if r13
            r12 = r13
          else
            if has_terminal?('\G[^\']', true, index)
              r14 = true
              @index += 1
            else
              r14 = nil
            end
            if r14
              r12 = r14
            else
              @index = i12
              r12 = nil
            end
          end
          if r12
            s11 << r12
          else
            break
          end
        end
        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
        s9 << r11
        if r11
          if has_terminal?("'", false, index)
            r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("'")
            r15 = nil
          end
          s9 << r15
        end
      end
      if s9.last
        r9 = instantiate_node(Piggly::Parser::Nodes::TString,input, i9...index, s9)
        r9.extend(TString2)
      else
        @index = i9
        r9 = nil
      end
      if r9
        r0 = r9
      else
        i16, s16 = index, []
        if has_terminal?("'", false, index)
          r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r17 = nil
        end
        s16 << r17
        if r17
          s18, i18 = [], index
          loop do
            i19 = index
            if has_terminal?("''", false, index)
              r20 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure("''")
              r20 = nil
            end
            if r20
              r19 = r20
            else
              if has_terminal?('\G[^\']', true, index)
                r21 = true
                @index += 1
              else
                r21 = nil
              end
              if r21
                r19 = r21
              else
                @index = i19
                r19 = nil
              end
            end
            if r19
              s18 << r19
            else
              break
            end
          end
          r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
          s16 << r18
          if r18
            if has_terminal?("'", false, index)
              r22 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("'")
              r22 = nil
            end
            s16 << r22
          end
        end
        if s16.last
          r16 = instantiate_node(Piggly::Parser::Nodes::TString,input, i16...index, s16)
          r16.extend(TString3)
        else
          @index = i16
          r16 = nil
        end
        if r16
          r0 = r16
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:tString][start_index] = r0

    r0
  end

  module TType0
    def rType
      elements[1]
    end

  end

  module TType1
    def rType
      elements[1]
    end

  end

  module TType2
    def ws
      elements[0]
    end

  end

  module TType3
  end

  def _nt_tType
    start_index = index
    if node_cache[:tType].has_key?(index)
      cached = node_cache[:tType][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-z\\200-\\377_]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        i4, s4 = index, []
        if has_terminal?('(', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_rType
          s4 << r6
          if r6
            if has_terminal?(')', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(')')
              r7 = nil
            end
            s4 << r7
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(TType0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          i8, s8 = index, []
          if has_terminal?('[', false, index)
            r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('[')
            r9 = nil
          end
          s8 << r9
          if r9
            r10 = _nt_rType
            s8 << r10
            if r10
              if has_terminal?(']', false, index)
                r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(']')
                r11 = nil
              end
              s8 << r11
            end
          end
          if s8.last
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            r8.extend(TType1)
          else
            @index = i8
            r8 = nil
          end
          if r8
            r3 = r8
          else
            s12, i12 = [], index
            loop do
              if has_terminal?('\G[a-z\\200-\\377_0-9$%]', true, index)
                r13 = true
                @index += 1
              else
                r13 = nil
              end
              if r13
                s12 << r13
              else
                break
              end
            end
            if s12.empty?
              @index = i12
              r12 = nil
            else
              r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
            end
            if r12
              r3 = r12
            else
              i14, s14 = index, []
              r15 = _nt_ws
              s14 << r15
              if r15
                i16 = index
                i17 = index
                r18 = _nt_kwAS
                if r18
                  r17 = r18
                else
                  r19 = _nt_kwNOT
                  if r19
                    r17 = r19
                  else
                    r20 = _nt_kwASSIGN
                    if r20
                      r17 = r20
                    else
                      r21 = _nt_kwDEFAULT
                      if r21
                        r17 = r21
                      else
                        @index = i17
                        r17 = nil
                      end
                    end
                  end
                end
                if r17
                  r16 = nil
                else
                  @index = i16
                  r16 = instantiate_node(SyntaxNode,input, index...index)
                end
                s14 << r16
              end
              if s14.last
                r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                r14.extend(TType2)
              else
                @index = i14
                r14 = nil
              end
              if r14
                r3 = r14
              else
                @index = i3
                r3 = nil
              end
            end
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TDatatype,input, i0...index, s0)
      r0.extend(TType3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tType][start_index] = r0

    r0
  end

  module RType0
    def rType
      elements[1]
    end

  end

  module RType1
    def rType
      elements[1]
    end

  end

  def _nt_rType
    start_index = index
    if node_cache[:rType].has_key?(index)
      cached = node_cache[:rType][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      i2, s2 = index, []
      if has_terminal?('(', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('(')
        r3 = nil
      end
      s2 << r3
      if r3
        r4 = _nt_rType
        s2 << r4
        if r4
          if has_terminal?(')', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(')')
            r5 = nil
          end
          s2 << r5
        end
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(RType0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r1 = r2
      else
        i6, s6 = index, []
        if has_terminal?('[', false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('[')
          r7 = nil
        end
        s6 << r7
        if r7
          r8 = _nt_rType
          s6 << r8
          if r8
            if has_terminal?(']', false, index)
              r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(']')
              r9 = nil
            end
            s6 << r9
          end
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(RType1)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r1 = r6
        else
          s10, i10 = [], index
          loop do
            if has_terminal?('\G[^\\(\\)\\[\\]]', true, index)
              r11 = true
              @index += 1
            else
              r11 = nil
            end
            if r11
              s10 << r11
            else
              break
            end
          end
          if s10.empty?
            @index = i10
            r10 = nil
          else
            r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
          end
          if r10
            r1 = r10
          else
            @index = i1
            r1 = nil
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:rType][start_index] = r0

    r0
  end

  module TSpace0
    def ws
      elements[0]
    end

  end

  def _nt_tSpace
    start_index = index
    if node_cache[:tSpace].has_key?(index)
      cached = node_cache[:tSpace][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_ws
    s1 << r2
    if r2
      i3 = index
      r4 = _nt_tComment
      if r4
        r3 = nil
      else
        @index = i3
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Piggly::Parser::Nodes::TextNode,input, i1...index, s1)
      r1.extend(TSpace0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      s5, i5 = [], index
      loop do
        i6 = index
        r7 = _nt_ws
        if r7
          r6 = r7
        else
          r8 = _nt_tComment
          if r8
            r6 = r8
          else
            @index = i6
            r6 = nil
          end
        end
        if r6
          s5 << r6
        else
          break
        end
      end
      if s5.empty?
        @index = i5
        r5 = nil
      else
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
      end
      if r5
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:tSpace][start_index] = r0

    r0
  end

  module TComment0
  end

  module TComment1
    def content
      elements[1]
    end

  end

  module TComment2
    def content
      elements[1]
    end

  end

  def _nt_tComment
    start_index = index
    if node_cache[:tComment].has_key?(index)
      cached = node_cache[:tComment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('/*', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('/*')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        i5 = index
        if has_terminal?('*/', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('*/')
          r6 = nil
        end
        if r6
          r5 = nil
        else
          @index = i5
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if index < input_length
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r7 = nil
          end
          s4 << r7
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(TComment0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
      if r3
        if has_terminal?('*/', false, index)
          r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('*/')
          r8 = nil
        end
        s1 << r8
      end
    end
    if s1.last
      r1 = instantiate_node(Piggly::Parser::Nodes::TComment,input, i1...index, s1)
      r1.extend(TComment1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i9, s9 = index, []
      if has_terminal?('--', false, index)
        r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('--')
        r10 = nil
      end
      s9 << r10
      if r10
        s11, i11 = [], index
        loop do
          if has_terminal?('\G[^\\n]', true, index)
            r12 = true
            @index += 1
          else
            r12 = nil
          end
          if r12
            s11 << r12
          else
            break
          end
        end
        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
        s9 << r11
        if r11
          i13 = index
          if has_terminal?("\n", false, index)
            r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\n")
            r14 = nil
          end
          if r14
            r13 = r14
          else
            r15 = _nt_tEOF
            if r15
              r13 = r15
            else
              @index = i13
              r13 = nil
            end
          end
          s9 << r13
        end
      end
      if s9.last
        r9 = instantiate_node(Piggly::Parser::Nodes::TComment,input, i9...index, s9)
        r9.extend(TComment2)
      else
        @index = i9
        r9 = nil
      end
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:tComment][start_index] = r0

    r0
  end

  module TBinary0
  end

  def _nt_tBinary
    start_index = index
    if node_cache[:tBinary].has_key?(index)
      cached = node_cache[:tBinary][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("b'", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("b'")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[01]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?("'", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TBinary0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tBinary][start_index] = r0

    r0
  end

  module THex0
  end

  def _nt_tHex
    start_index = index
    if node_cache[:tHex].has_key?(index)
      cached = node_cache[:tHex][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("x'", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("x'")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[0123456789abcdef]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?("'", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(THex0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tHex][start_index] = r0

    r0
  end

  module TNumber0
  end

  module TNumber1
    def sign
      elements[0]
    end

    def exponent
      elements[3]
    end
  end

  module TNumber2
  end

  module TNumber3
    def sign
      elements[0]
    end

    def exponent
      elements[4]
    end
  end

  module TNumber4
  end

  module TNumber5
    def sign
      elements[0]
    end

    def exponent
      elements[3]
    end
  end

  def _nt_tNumber
    start_index = index
    if node_cache[:tNumber].has_key?(index)
      cached = node_cache[:tNumber][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_tBinary
    if r1
      r0 = r1
    else
      r2 = _nt_tHex
      if r2
        r0 = r2
      else
        i3, s3 = index, []
        if has_terminal?('\G[+-]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if has_terminal?('.', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('.')
            r6 = nil
          end
          s3 << r6
          if r6
            s7, i7 = [], index
            loop do
              if has_terminal?('\G[0-9]', true, index)
                r8 = true
                @index += 1
              else
                r8 = nil
              end
              if r8
                s7 << r8
              else
                break
              end
            end
            if s7.empty?
              @index = i7
              r7 = nil
            else
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            end
            s3 << r7
            if r7
              i10, s10 = index, []
              if has_terminal?('e', false, index)
                r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('e')
                r11 = nil
              end
              s10 << r11
              if r11
                if has_terminal?('\G[+-]', true, index)
                  r13 = true
                  @index += 1
                else
                  r13 = nil
                end
                if r13
                  r12 = r13
                else
                  r12 = instantiate_node(SyntaxNode,input, index...index)
                end
                s10 << r12
                if r12
                  s14, i14 = [], index
                  loop do
                    if has_terminal?('\G[0-9]', true, index)
                      r15 = true
                      @index += 1
                    else
                      r15 = nil
                    end
                    if r15
                      s14 << r15
                    else
                      break
                    end
                  end
                  if s14.empty?
                    @index = i14
                    r14 = nil
                  else
                    r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                  end
                  s10 << r14
                end
              end
              if s10.last
                r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                r10.extend(TNumber0)
              else
                @index = i10
                r10 = nil
              end
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(TNumber1)
        else
          @index = i3
          r3 = nil
        end
        if r3
          r0 = r3
        else
          i16, s16 = index, []
          if has_terminal?('\G[+-]', true, index)
            r18 = true
            @index += 1
          else
            r18 = nil
          end
          if r18
            r17 = r18
          else
            r17 = instantiate_node(SyntaxNode,input, index...index)
          end
          s16 << r17
          if r17
            s19, i19 = [], index
            loop do
              if has_terminal?('\G[0-9]', true, index)
                r20 = true
                @index += 1
              else
                r20 = nil
              end
              if r20
                s19 << r20
              else
                break
              end
            end
            if s19.empty?
              @index = i19
              r19 = nil
            else
              r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
            end
            s16 << r19
            if r19
              if has_terminal?('.', false, index)
                r21 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('.')
                r21 = nil
              end
              s16 << r21
              if r21
                s22, i22 = [], index
                loop do
                  if has_terminal?('\G[0-9]', true, index)
                    r23 = true
                    @index += 1
                  else
                    r23 = nil
                  end
                  if r23
                    s22 << r23
                  else
                    break
                  end
                end
                r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                s16 << r22
                if r22
                  i25, s25 = index, []
                  if has_terminal?('e', false, index)
                    r26 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('e')
                    r26 = nil
                  end
                  s25 << r26
                  if r26
                    if has_terminal?('\G[+-]', true, index)
                      r28 = true
                      @index += 1
                    else
                      r28 = nil
                    end
                    if r28
                      r27 = r28
                    else
                      r27 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s25 << r27
                    if r27
                      s29, i29 = [], index
                      loop do
                        if has_terminal?('\G[0-9]', true, index)
                          r30 = true
                          @index += 1
                        else
                          r30 = nil
                        end
                        if r30
                          s29 << r30
                        else
                          break
                        end
                      end
                      if s29.empty?
                        @index = i29
                        r29 = nil
                      else
                        r29 = instantiate_node(SyntaxNode,input, i29...index, s29)
                      end
                      s25 << r29
                    end
                  end
                  if s25.last
                    r25 = instantiate_node(SyntaxNode,input, i25...index, s25)
                    r25.extend(TNumber2)
                  else
                    @index = i25
                    r25 = nil
                  end
                  if r25
                    r24 = r25
                  else
                    r24 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s16 << r24
                end
              end
            end
          end
          if s16.last
            r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
            r16.extend(TNumber3)
          else
            @index = i16
            r16 = nil
          end
          if r16
            r0 = r16
          else
            i31, s31 = index, []
            if has_terminal?('\G[+-]', true, index)
              r33 = true
              @index += 1
            else
              r33 = nil
            end
            if r33
              r32 = r33
            else
              r32 = instantiate_node(SyntaxNode,input, index...index)
            end
            s31 << r32
            if r32
              s34, i34 = [], index
              loop do
                if has_terminal?('\G[0-9]', true, index)
                  r35 = true
                  @index += 1
                else
                  r35 = nil
                end
                if r35
                  s34 << r35
                else
                  break
                end
              end
              if s34.empty?
                @index = i34
                r34 = nil
              else
                r34 = instantiate_node(SyntaxNode,input, i34...index, s34)
              end
              s31 << r34
              if r34
                if has_terminal?('.', false, index)
                  r37 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('.')
                  r37 = nil
                end
                if r37
                  r36 = r37
                else
                  r36 = instantiate_node(SyntaxNode,input, index...index)
                end
                s31 << r36
                if r36
                  i39, s39 = index, []
                  if has_terminal?('e', false, index)
                    r40 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('e')
                    r40 = nil
                  end
                  s39 << r40
                  if r40
                    if has_terminal?('\G[+-]', true, index)
                      r42 = true
                      @index += 1
                    else
                      r42 = nil
                    end
                    if r42
                      r41 = r42
                    else
                      r41 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s39 << r41
                    if r41
                      s43, i43 = [], index
                      loop do
                        if has_terminal?('\G[0-9]', true, index)
                          r44 = true
                          @index += 1
                        else
                          r44 = nil
                        end
                        if r44
                          s43 << r44
                        else
                          break
                        end
                      end
                      if s43.empty?
                        @index = i43
                        r43 = nil
                      else
                        r43 = instantiate_node(SyntaxNode,input, i43...index, s43)
                      end
                      s39 << r43
                    end
                  end
                  if s39.last
                    r39 = instantiate_node(SyntaxNode,input, i39...index, s39)
                    r39.extend(TNumber4)
                  else
                    @index = i39
                    r39 = nil
                  end
                  if r39
                    r38 = r39
                  else
                    r38 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s31 << r38
                end
              end
            end
            if s31.last
              r31 = instantiate_node(SyntaxNode,input, i31...index, s31)
              r31.extend(TNumber5)
            else
              @index = i31
              r31 = nil
            end
            if r31
              r0 = r31
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:tNumber][start_index] = r0

    r0
  end

  module TLiteral0
    def tType
      elements[3]
    end
  end

  module TLiteral1
    def tString
      elements[0]
    end

  end

  module TLiteral2
    def tType
      elements[3]
    end
  end

  module TLiteral3
    def tNumber
      elements[0]
    end

  end

  module TLiteral4
    def tString
      elements[4]
    end

    def tSpace1
      elements[5]
    end

    def kwAS
      elements[6]
    end

    def tSpace2
      elements[7]
    end

    def tType
      elements[8]
    end

  end

  module TLiteral5
    def tNumber
      elements[4]
    end

    def tSpace1
      elements[5]
    end

    def kwAS
      elements[6]
    end

    def tSpace2
      elements[7]
    end

    def tType
      elements[8]
    end

  end

  def _nt_tLiteral
    start_index = index
    if node_cache[:tLiteral].has_key?(index)
      cached = node_cache[:tLiteral][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_tString
    s1 << r2
    if r2
      i3, s3 = index, []
      r5 = _nt_tSpace
      if r5
        r4 = r5
      else
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s3 << r4
      if r4
        if has_terminal?('::', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('::')
          r6 = nil
        end
        s3 << r6
        if r6
          r8 = _nt_tSpace
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s3 << r7
          if r7
            r9 = _nt_tType
            s3 << r9
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(TLiteral0)
      else
        @index = i3
        r3 = nil
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(TLiteral1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r10 = _nt_tString
      if r10
        r0 = r10
      else
        i11, s11 = index, []
        r12 = _nt_tNumber
        s11 << r12
        if r12
          i13, s13 = index, []
          r15 = _nt_tSpace
          if r15
            r14 = r15
          else
            r14 = instantiate_node(SyntaxNode,input, index...index)
          end
          s13 << r14
          if r14
            if has_terminal?('::', false, index)
              r16 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('::')
              r16 = nil
            end
            s13 << r16
            if r16
              r18 = _nt_tSpace
              if r18
                r17 = r18
              else
                r17 = instantiate_node(SyntaxNode,input, index...index)
              end
              s13 << r17
              if r17
                r19 = _nt_tType
                s13 << r19
              end
            end
          end
          if s13.last
            r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
            r13.extend(TLiteral2)
          else
            @index = i13
            r13 = nil
          end
          s11 << r13
        end
        if s11.last
          r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
          r11.extend(TLiteral3)
        else
          @index = i11
          r11 = nil
        end
        if r11
          r0 = r11
        else
          r20 = _nt_tNumber
          if r20
            r0 = r20
          else
            i21, s21 = index, []
            if has_terminal?('cast', false, index)
              r22 = instantiate_node(SyntaxNode,input, index...(index + 4))
              @index += 4
            else
              terminal_parse_failure('cast')
              r22 = nil
            end
            s21 << r22
            if r22
              r24 = _nt_tSpace
              if r24
                r23 = r24
              else
                r23 = instantiate_node(SyntaxNode,input, index...index)
              end
              s21 << r23
              if r23
                if has_terminal?('(', false, index)
                  r25 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('(')
                  r25 = nil
                end
                s21 << r25
                if r25
                  r27 = _nt_tSpace
                  if r27
                    r26 = r27
                  else
                    r26 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s21 << r26
                  if r26
                    r28 = _nt_tString
                    s21 << r28
                    if r28
                      r29 = _nt_tSpace
                      s21 << r29
                      if r29
                        r30 = _nt_kwAS
                        s21 << r30
                        if r30
                          r31 = _nt_tSpace
                          s21 << r31
                          if r31
                            r32 = _nt_tType
                            s21 << r32
                            if r32
                              r34 = _nt_tSpace
                              if r34
                                r33 = r34
                              else
                                r33 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s21 << r33
                              if r33
                                if has_terminal?(')', false, index)
                                  r35 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure(')')
                                  r35 = nil
                                end
                                s21 << r35
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
            if s21.last
              r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
              r21.extend(TLiteral4)
            else
              @index = i21
              r21 = nil
            end
            if r21
              r0 = r21
            else
              i36, s36 = index, []
              if has_terminal?('cast', false, index)
                r37 = instantiate_node(SyntaxNode,input, index...(index + 4))
                @index += 4
              else
                terminal_parse_failure('cast')
                r37 = nil
              end
              s36 << r37
              if r37
                r39 = _nt_tSpace
                if r39
                  r38 = r39
                else
                  r38 = instantiate_node(SyntaxNode,input, index...index)
                end
                s36 << r38
                if r38
                  if has_terminal?('(', false, index)
                    r40 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('(')
                    r40 = nil
                  end
                  s36 << r40
                  if r40
                    r42 = _nt_tSpace
                    if r42
                      r41 = r42
                    else
                      r41 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s36 << r41
                    if r41
                      r43 = _nt_tNumber
                      s36 << r43
                      if r43
                        r44 = _nt_tSpace
                        s36 << r44
                        if r44
                          r45 = _nt_kwAS
                          s36 << r45
                          if r45
                            r46 = _nt_tSpace
                            s36 << r46
                            if r46
                              r47 = _nt_tType
                              s36 << r47
                              if r47
                                r49 = _nt_tSpace
                                if r49
                                  r48 = r49
                                else
                                  r48 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s36 << r48
                                if r48
                                  if has_terminal?(')', false, index)
                                    r50 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                    @index += 1
                                  else
                                    terminal_parse_failure(')')
                                    r50 = nil
                                  end
                                  s36 << r50
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
              if s36.last
                r36 = instantiate_node(SyntaxNode,input, i36...index, s36)
                r36.extend(TLiteral5)
              else
                @index = i36
                r36 = nil
              end
              if r36
                r0 = r36
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:tLiteral][start_index] = r0

    r0
  end

  module SqlKeyword0
  end

  def _nt_sqlKeyword
    start_index = index
    if node_cache[:sqlKeyword].has_key?(index)
      cached = node_cache[:sqlKeyword][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('insert', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('insert')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('select', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('select')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        if has_terminal?('update', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 6))
          @index += 6
        else
          terminal_parse_failure('update')
          r4 = nil
        end
        if r4
          r1 = r4
        else
          if has_terminal?('delete', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 6))
            @index += 6
          else
            terminal_parse_failure('delete')
            r5 = nil
          end
          if r5
            r1 = r5
          else
            if has_terminal?('drop', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 4))
              @index += 4
            else
              terminal_parse_failure('drop')
              r6 = nil
            end
            if r6
              r1 = r6
            else
              if has_terminal?('alter', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 5))
                @index += 5
              else
                terminal_parse_failure('alter')
                r7 = nil
              end
              if r7
                r1 = r7
              else
                if has_terminal?('commit', false, index)
                  r8 = instantiate_node(SyntaxNode,input, index...(index + 6))
                  @index += 6
                else
                  terminal_parse_failure('commit')
                  r8 = nil
                end
                if r8
                  r1 = r8
                else
                  if has_terminal?('copy', false, index)
                    r9 = instantiate_node(SyntaxNode,input, index...(index + 4))
                    @index += 4
                  else
                    terminal_parse_failure('copy')
                    r9 = nil
                  end
                  if r9
                    r1 = r9
                  else
                    if has_terminal?('create', false, index)
                      r10 = instantiate_node(SyntaxNode,input, index...(index + 6))
                      @index += 6
                    else
                      terminal_parse_failure('create')
                      r10 = nil
                    end
                    if r10
                      r1 = r10
                    else
                      if has_terminal?('begin', false, index)
                        r11 = instantiate_node(SyntaxNode,input, index...(index + 5))
                        @index += 5
                      else
                        terminal_parse_failure('begin')
                        r11 = nil
                      end
                      if r11
                        r1 = r11
                      else
                        if has_terminal?('rollback', false, index)
                          r12 = instantiate_node(SyntaxNode,input, index...(index + 8))
                          @index += 8
                        else
                          terminal_parse_failure('rollback')
                          r12 = nil
                        end
                        if r12
                          r1 = r12
                        else
                          if has_terminal?('set', false, index)
                            r13 = instantiate_node(SyntaxNode,input, index...(index + 3))
                            @index += 3
                          else
                            terminal_parse_failure('set')
                            r13 = nil
                          end
                          if r13
                            r1 = r13
                          else
                            if has_terminal?('start', false, index)
                              r14 = instantiate_node(SyntaxNode,input, index...(index + 5))
                              @index += 5
                            else
                              terminal_parse_failure('start')
                              r14 = nil
                            end
                            if r14
                              r1 = r14
                            else
                              if has_terminal?('vacuum', false, index)
                                r15 = instantiate_node(SyntaxNode,input, index...(index + 6))
                                @index += 6
                              else
                                terminal_parse_failure('vacuum')
                                r15 = nil
                              end
                              if r15
                                r1 = r15
                              else
                                @index = i1
                                r1 = nil
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    s0 << r1
    if r1
      i16 = index
      if has_terminal?('\G[a-z0-9]', true, index)
        r17 = true
        @index += 1
      else
        r17 = nil
      end
      if r17
        r16 = nil
      else
        @index = i16
        r16 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r16
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TextNode,input, i0...index, s0)
      r0.extend(SqlKeyword0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:sqlKeyword][start_index] = r0

    r0
  end

  def _nt_keyword
    start_index = index
    if node_cache[:keyword].has_key?(index)
      cached = node_cache[:keyword][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_kwWHEN
    if r1
      r0 = r1
    else
      r2 = _nt_kwAS
      if r2
        r0 = r2
      else
        r3 = _nt_kwASSIGN
        if r3
          r0 = r3
        else
          r4 = _nt_kwALIAS
          if r4
            r0 = r4
          else
            r5 = _nt_kwBEGIN
            if r5
              r0 = r5
            else
              r6 = _nt_kwBY
              if r6
                r0 = r6
              else
                r7 = _nt_kwCASE
                if r7
                  r0 = r7
                else
                  r8 = _nt_kwCLOSE
                  if r8
                    r0 = r8
                  else
                    r9 = _nt_kwCONSTANT
                    if r9
                      r0 = r9
                    else
                      r10 = _nt_kwCONTINUE
                      if r10
                        r0 = r10
                      else
                        r11 = _nt_kwCURSOR
                        if r11
                          r0 = r11
                        else
                          r12 = _nt_kwDEBUG
                          if r12
                            r0 = r12
                          else
                            r13 = _nt_kwDECLARE
                            if r13
                              r0 = r13
                            else
                              r14 = _nt_kwDEFAULT
                              if r14
                                r0 = r14
                              else
                                r15 = _nt_kwDIAGNOSTICS
                                if r15
                                  r0 = r15
                                else
                                  r16 = _nt_kwELSE
                                  if r16
                                    r0 = r16
                                  else
                                    r17 = _nt_kwELSIF
                                    if r17
                                      r0 = r17
                                    else
                                      r18 = _nt_kwEND
                                      if r18
                                        r0 = r18
                                      else
                                        r19 = _nt_kwEXCEPTION
                                        if r19
                                          r0 = r19
                                        else
                                          r20 = _nt_kwEXECUTE
                                          if r20
                                            r0 = r20
                                          else
                                            r21 = _nt_kwEXIT
                                            if r21
                                              r0 = r21
                                            else
                                              r22 = _nt_kwFETCH
                                              if r22
                                                r0 = r22
                                              else
                                                r23 = _nt_kwFOR
                                                if r23
                                                  r0 = r23
                                                else
                                                  r24 = _nt_kwFROM
                                                  if r24
                                                    r0 = r24
                                                  else
                                                    r25 = _nt_kwGET
                                                    if r25
                                                      r0 = r25
                                                    else
                                                      r26 = _nt_kwIF
                                                      if r26
                                                        r0 = r26
                                                      else
                                                        r27 = _nt_kwIN
                                                        if r27
                                                          r0 = r27
                                                        else
                                                          r28 = _nt_kwINFO
                                                          if r28
                                                            r0 = r28
                                                          else
                                                            r29 = _nt_kwINSERT
                                                            if r29
                                                              r0 = r29
                                                            else
                                                              r30 = _nt_kwINTO
                                                              if r30
                                                                r0 = r30
                                                              else
                                                                r31 = _nt_kwIS
                                                                if r31
                                                                  r0 = r31
                                                                else
                                                                  r32 = _nt_kwLOG
                                                                  if r32
                                                                    r0 = r32
                                                                  else
                                                                    r33 = _nt_kwLOOP
                                                                    if r33
                                                                      r0 = r33
                                                                    else
                                                                      r34 = _nt_kwMOVE
                                                                      if r34
                                                                        r0 = r34
                                                                      else
                                                                        r35 = _nt_kwNOT
                                                                        if r35
                                                                          r0 = r35
                                                                        else
                                                                          r36 = _nt_kwNOTICE
                                                                          if r36
                                                                            r0 = r36
                                                                          else
                                                                            r37 = _nt_kwNULL
                                                                            if r37
                                                                              r0 = r37
                                                                            else
                                                                              r38 = _nt_kwOPEN
                                                                              if r38
                                                                                r0 = r38
                                                                              else
                                                                                r39 = _nt_kwOR
                                                                                if r39
                                                                                  r0 = r39
                                                                                else
                                                                                  r40 = _nt_kwPERFORM
                                                                                  if r40
                                                                                    r0 = r40
                                                                                  else
                                                                                    r41 = _nt_kwRAISE
                                                                                    if r41
                                                                                      r0 = r41
                                                                                    else
                                                                                      r42 = _nt_kwRENAME
                                                                                      if r42
                                                                                        r0 = r42
                                                                                      else
                                                                                        r43 = _nt_kwRESULTOID
                                                                                        if r43
                                                                                          r0 = r43
                                                                                        else
                                                                                          r44 = _nt_kwRETURN
                                                                                          if r44
                                                                                            r0 = r44
                                                                                          else
                                                                                            r45 = _nt_kwREVERSE
                                                                                            if r45
                                                                                              r0 = r45
                                                                                            else
                                                                                              r46 = _nt_kwROWCOUNT
                                                                                              if r46
                                                                                                r0 = r46
                                                                                              else
                                                                                                r47 = _nt_kwSCROLL
                                                                                                if r47
                                                                                                  r0 = r47
                                                                                                else
                                                                                                  r48 = _nt_kwSTRICT
                                                                                                  if r48
                                                                                                    r0 = r48
                                                                                                  else
                                                                                                    r49 = _nt_kwTHEN
                                                                                                    if r49
                                                                                                      r0 = r49
                                                                                                    else
                                                                                                      r50 = _nt_kwTO
                                                                                                      if r50
                                                                                                        r0 = r50
                                                                                                      else
                                                                                                        r51 = _nt_kwTYPE
                                                                                                        if r51
                                                                                                          r0 = r51
                                                                                                        else
                                                                                                          r52 = _nt_kwWARNING
                                                                                                          if r52
                                                                                                            r0 = r52
                                                                                                          else
                                                                                                            r53 = _nt_kwWHILE
                                                                                                            if r53
                                                                                                              r0 = r53
                                                                                                            else
                                                                                                              @index = i0
                                                                                                              r0 = nil
                                                                                                            end
                                                                                                          end
                                                                                                        end
                                                                                                      end
                                                                                                    end
                                                                                                  end
                                                                                                end
                                                                                              end
                                                                                            end
                                                                                          end
                                                                                        end
                                                                                      end
                                                                                    end
                                                                                  end
                                                                                end
                                                                              end
                                                                            end
                                                                          end
                                                                        end
                                                                      end
                                                                    end
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:keyword][start_index] = r0

    r0
  end

  def _nt_x
    start_index = index
    if node_cache[:x].has_key?(index)
      cached = node_cache[:x][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[^a-z0-9_]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:x][start_index] = r0

    r0
  end

  module KwAS0
  end

  def _nt_kwAS
    start_index = index
    if node_cache[:kwAS].has_key?(index)
      cached = node_cache[:kwAS][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('as', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('as')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwAS0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwAS][start_index] = r0

    r0
  end

  def _nt_kwASSIGN
    start_index = index
    if node_cache[:kwASSIGN].has_key?(index)
      cached = node_cache[:kwASSIGN][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?(':=', false, index)
      r1 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure(':=')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('=', false, index)
        r2 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('=')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:kwASSIGN][start_index] = r0

    r0
  end

  module KwALIAS0
  end

  def _nt_kwALIAS
    start_index = index
    if node_cache[:kwALIAS].has_key?(index)
      cached = node_cache[:kwALIAS][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('alias', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('alias')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwALIAS0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwALIAS][start_index] = r0

    r0
  end

  module KwBEGIN0
  end

  def _nt_kwBEGIN
    start_index = index
    if node_cache[:kwBEGIN].has_key?(index)
      cached = node_cache[:kwBEGIN][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('begin', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('begin')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwBEGIN0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwBEGIN][start_index] = r0

    r0
  end

  module KwBY0
  end

  def _nt_kwBY
    start_index = index
    if node_cache[:kwBY].has_key?(index)
      cached = node_cache[:kwBY][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('by', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('by')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwBY0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwBY][start_index] = r0

    r0
  end

  module KwCASE0
  end

  def _nt_kwCASE
    start_index = index
    if node_cache[:kwCASE].has_key?(index)
      cached = node_cache[:kwCASE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('case', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('case')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwCASE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwCASE][start_index] = r0

    r0
  end

  module KwCLOSE0
  end

  def _nt_kwCLOSE
    start_index = index
    if node_cache[:kwCLOSE].has_key?(index)
      cached = node_cache[:kwCLOSE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('close', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('close')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwCLOSE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwCLOSE][start_index] = r0

    r0
  end

  module KwCONSTANT0
  end

  def _nt_kwCONSTANT
    start_index = index
    if node_cache[:kwCONSTANT].has_key?(index)
      cached = node_cache[:kwCONSTANT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('constant', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure('constant')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwCONSTANT0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwCONSTANT][start_index] = r0

    r0
  end

  module KwCONTINUE0
  end

  def _nt_kwCONTINUE
    start_index = index
    if node_cache[:kwCONTINUE].has_key?(index)
      cached = node_cache[:kwCONTINUE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('continue', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure('continue')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwCONTINUE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwCONTINUE][start_index] = r0

    r0
  end

  module KwCURSOR0
  end

  def _nt_kwCURSOR
    start_index = index
    if node_cache[:kwCURSOR].has_key?(index)
      cached = node_cache[:kwCURSOR][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('cursor', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('cursor')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwCURSOR0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwCURSOR][start_index] = r0

    r0
  end

  module KwDEBUG0
  end

  def _nt_kwDEBUG
    start_index = index
    if node_cache[:kwDEBUG].has_key?(index)
      cached = node_cache[:kwDEBUG][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('debug', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('debug')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwDEBUG0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwDEBUG][start_index] = r0

    r0
  end

  module KwDECLARE0
  end

  def _nt_kwDECLARE
    start_index = index
    if node_cache[:kwDECLARE].has_key?(index)
      cached = node_cache[:kwDECLARE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('declare', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('declare')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwDECLARE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwDECLARE][start_index] = r0

    r0
  end

  module KwDEFAULT0
  end

  def _nt_kwDEFAULT
    start_index = index
    if node_cache[:kwDEFAULT].has_key?(index)
      cached = node_cache[:kwDEFAULT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('default', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('default')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwDEFAULT0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwDEFAULT][start_index] = r0

    r0
  end

  module KwDIAGNOSTICS0
  end

  def _nt_kwDIAGNOSTICS
    start_index = index
    if node_cache[:kwDIAGNOSTICS].has_key?(index)
      cached = node_cache[:kwDIAGNOSTICS][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('diagnostics', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 11))
      @index += 11
    else
      terminal_parse_failure('diagnostics')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwDIAGNOSTICS0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwDIAGNOSTICS][start_index] = r0

    r0
  end

  module KwELSE0
  end

  def _nt_kwELSE
    start_index = index
    if node_cache[:kwELSE].has_key?(index)
      cached = node_cache[:kwELSE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('else', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('else')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwELSE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwELSE][start_index] = r0

    r0
  end

  module KwELSIF0
  end

  def _nt_kwELSIF
    start_index = index
    if node_cache[:kwELSIF].has_key?(index)
      cached = node_cache[:kwELSIF][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('elsif', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('elsif')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('elseif', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('elseif')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i4 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r5 = true
        @index += 1
      else
        r5 = nil
      end
      if r5
        r4 = nil
      else
        @index = i4
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwELSIF0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwELSIF][start_index] = r0

    r0
  end

  module KwEND0
  end

  def _nt_kwEND
    start_index = index
    if node_cache[:kwEND].has_key?(index)
      cached = node_cache[:kwEND][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('end', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('end')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwEND0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwEND][start_index] = r0

    r0
  end

  module KwEXCEPTION0
  end

  def _nt_kwEXCEPTION
    start_index = index
    if node_cache[:kwEXCEPTION].has_key?(index)
      cached = node_cache[:kwEXCEPTION][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('exception', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
      @index += 9
    else
      terminal_parse_failure('exception')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwEXCEPTION0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwEXCEPTION][start_index] = r0

    r0
  end

  module KwEXECUTE0
  end

  def _nt_kwEXECUTE
    start_index = index
    if node_cache[:kwEXECUTE].has_key?(index)
      cached = node_cache[:kwEXECUTE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('execute', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('execute')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwEXECUTE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwEXECUTE][start_index] = r0

    r0
  end

  module KwEXIT0
  end

  def _nt_kwEXIT
    start_index = index
    if node_cache[:kwEXIT].has_key?(index)
      cached = node_cache[:kwEXIT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('exit', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('exit')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwEXIT0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwEXIT][start_index] = r0

    r0
  end

  module KwFETCH0
  end

  def _nt_kwFETCH
    start_index = index
    if node_cache[:kwFETCH].has_key?(index)
      cached = node_cache[:kwFETCH][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('fetch', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('fetch')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwFETCH0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwFETCH][start_index] = r0

    r0
  end

  module KwFOR0
  end

  def _nt_kwFOR
    start_index = index
    if node_cache[:kwFOR].has_key?(index)
      cached = node_cache[:kwFOR][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('for', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('for')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwFOR0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwFOR][start_index] = r0

    r0
  end

  module KwFROM0
  end

  def _nt_kwFROM
    start_index = index
    if node_cache[:kwFROM].has_key?(index)
      cached = node_cache[:kwFROM][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('from', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('from')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwFROM0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwFROM][start_index] = r0

    r0
  end

  module KwGET0
  end

  def _nt_kwGET
    start_index = index
    if node_cache[:kwGET].has_key?(index)
      cached = node_cache[:kwGET][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('get', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('get')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwGET0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwGET][start_index] = r0

    r0
  end

  module KwIF0
  end

  def _nt_kwIF
    start_index = index
    if node_cache[:kwIF].has_key?(index)
      cached = node_cache[:kwIF][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('if', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('if')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwIF0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwIF][start_index] = r0

    r0
  end

  module KwIN0
  end

  def _nt_kwIN
    start_index = index
    if node_cache[:kwIN].has_key?(index)
      cached = node_cache[:kwIN][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('in', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('in')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwIN0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwIN][start_index] = r0

    r0
  end

  module KwINFO0
  end

  def _nt_kwINFO
    start_index = index
    if node_cache[:kwINFO].has_key?(index)
      cached = node_cache[:kwINFO][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('info', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('info')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwINFO0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwINFO][start_index] = r0

    r0
  end

  module KwINSERT0
  end

  def _nt_kwINSERT
    start_index = index
    if node_cache[:kwINSERT].has_key?(index)
      cached = node_cache[:kwINSERT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('insert', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('insert')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwINSERT0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwINSERT][start_index] = r0

    r0
  end

  module KwINTO0
  end

  def _nt_kwINTO
    start_index = index
    if node_cache[:kwINTO].has_key?(index)
      cached = node_cache[:kwINTO][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('into', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('into')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwINTO0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwINTO][start_index] = r0

    r0
  end

  module KwIS0
  end

  def _nt_kwIS
    start_index = index
    if node_cache[:kwIS].has_key?(index)
      cached = node_cache[:kwIS][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('is', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('is')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwIS0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwIS][start_index] = r0

    r0
  end

  module KwLOG0
  end

  def _nt_kwLOG
    start_index = index
    if node_cache[:kwLOG].has_key?(index)
      cached = node_cache[:kwLOG][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('log', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('log')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwLOG0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwLOG][start_index] = r0

    r0
  end

  module KwLOOP0
  end

  def _nt_kwLOOP
    start_index = index
    if node_cache[:kwLOOP].has_key?(index)
      cached = node_cache[:kwLOOP][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('loop', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('loop')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwLOOP0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwLOOP][start_index] = r0

    r0
  end

  module KwMOVE0
  end

  def _nt_kwMOVE
    start_index = index
    if node_cache[:kwMOVE].has_key?(index)
      cached = node_cache[:kwMOVE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('move', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('move')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwMOVE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwMOVE][start_index] = r0

    r0
  end

  module KwNEXT0
  end

  def _nt_kwNEXT
    start_index = index
    if node_cache[:kwNEXT].has_key?(index)
      cached = node_cache[:kwNEXT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('next', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('next')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwNEXT0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwNEXT][start_index] = r0

    r0
  end

  module KwNOT0
  end

  def _nt_kwNOT
    start_index = index
    if node_cache[:kwNOT].has_key?(index)
      cached = node_cache[:kwNOT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('not', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('not')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwNOT0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwNOT][start_index] = r0

    r0
  end

  module KwNOTICE0
  end

  def _nt_kwNOTICE
    start_index = index
    if node_cache[:kwNOTICE].has_key?(index)
      cached = node_cache[:kwNOTICE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('notice', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('notice')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwNOTICE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwNOTICE][start_index] = r0

    r0
  end

  module KwNULL0
  end

  def _nt_kwNULL
    start_index = index
    if node_cache[:kwNULL].has_key?(index)
      cached = node_cache[:kwNULL][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('null', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('null')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwNULL0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwNULL][start_index] = r0

    r0
  end

  module KwOPEN0
  end

  def _nt_kwOPEN
    start_index = index
    if node_cache[:kwOPEN].has_key?(index)
      cached = node_cache[:kwOPEN][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('open', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('open')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwOPEN0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwOPEN][start_index] = r0

    r0
  end

  module KwOR0
  end

  def _nt_kwOR
    start_index = index
    if node_cache[:kwOR].has_key?(index)
      cached = node_cache[:kwOR][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('or', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('or')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwOR0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwOR][start_index] = r0

    r0
  end

  module KwPERFORM0
  end

  def _nt_kwPERFORM
    start_index = index
    if node_cache[:kwPERFORM].has_key?(index)
      cached = node_cache[:kwPERFORM][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('perform', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('perform')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwPERFORM0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwPERFORM][start_index] = r0

    r0
  end

  module KwQUERY0
  end

  def _nt_kwQUERY
    start_index = index
    if node_cache[:kwQUERY].has_key?(index)
      cached = node_cache[:kwQUERY][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('query', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('query')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwQUERY0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwQUERY][start_index] = r0

    r0
  end

  module KwRAISE0
  end

  def _nt_kwRAISE
    start_index = index
    if node_cache[:kwRAISE].has_key?(index)
      cached = node_cache[:kwRAISE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('raise', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('raise')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwRAISE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwRAISE][start_index] = r0

    r0
  end

  module KwRENAME0
  end

  def _nt_kwRENAME
    start_index = index
    if node_cache[:kwRENAME].has_key?(index)
      cached = node_cache[:kwRENAME][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('rename', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('rename')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwRENAME0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwRENAME][start_index] = r0

    r0
  end

  module KwRESULTOID0
  end

  def _nt_kwRESULTOID
    start_index = index
    if node_cache[:kwRESULTOID].has_key?(index)
      cached = node_cache[:kwRESULTOID][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('result_oid', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 10))
      @index += 10
    else
      terminal_parse_failure('result_oid')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwRESULTOID0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwRESULTOID][start_index] = r0

    r0
  end

  module KwRETURN0
  end

  def _nt_kwRETURN
    start_index = index
    if node_cache[:kwRETURN].has_key?(index)
      cached = node_cache[:kwRETURN][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('return', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('return')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwRETURN0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwRETURN][start_index] = r0

    r0
  end

  module KwREVERSE0
  end

  def _nt_kwREVERSE
    start_index = index
    if node_cache[:kwREVERSE].has_key?(index)
      cached = node_cache[:kwREVERSE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('reverse', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('reverse')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwREVERSE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwREVERSE][start_index] = r0

    r0
  end

  module KwROWCOUNT0
  end

  def _nt_kwROWCOUNT
    start_index = index
    if node_cache[:kwROWCOUNT].has_key?(index)
      cached = node_cache[:kwROWCOUNT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('row_count', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
      @index += 9
    else
      terminal_parse_failure('row_count')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwROWCOUNT0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwROWCOUNT][start_index] = r0

    r0
  end

  module KwSCROLL0
  end

  def _nt_kwSCROLL
    start_index = index
    if node_cache[:kwSCROLL].has_key?(index)
      cached = node_cache[:kwSCROLL][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('scroll', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('scroll')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwSCROLL0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwSCROLL][start_index] = r0

    r0
  end

  module KwSTRICT0
  end

  def _nt_kwSTRICT
    start_index = index
    if node_cache[:kwSTRICT].has_key?(index)
      cached = node_cache[:kwSTRICT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('strict', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('strict')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwSTRICT0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwSTRICT][start_index] = r0

    r0
  end

  module KwTHEN0
  end

  def _nt_kwTHEN
    start_index = index
    if node_cache[:kwTHEN].has_key?(index)
      cached = node_cache[:kwTHEN][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('then', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('then')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwTHEN0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwTHEN][start_index] = r0

    r0
  end

  module KwTO0
  end

  def _nt_kwTO
    start_index = index
    if node_cache[:kwTO].has_key?(index)
      cached = node_cache[:kwTO][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('to', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('to')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwTO0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwTO][start_index] = r0

    r0
  end

  module KwTYPE0
  end

  def _nt_kwTYPE
    start_index = index
    if node_cache[:kwTYPE].has_key?(index)
      cached = node_cache[:kwTYPE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('type', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('type')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwTYPE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwTYPE][start_index] = r0

    r0
  end

  module KwWARNING0
  end

  def _nt_kwWARNING
    start_index = index
    if node_cache[:kwWARNING].has_key?(index)
      cached = node_cache[:kwWARNING][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('warning', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('warning')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwWARNING0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwWARNING][start_index] = r0

    r0
  end

  module KwWHEN0
  end

  def _nt_kwWHEN
    start_index = index
    if node_cache[:kwWHEN].has_key?(index)
      cached = node_cache[:kwWHEN][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('when', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('when')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwWHEN0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwWHEN][start_index] = r0

    r0
  end

  module KwWHILE0
  end

  def _nt_kwWHILE
    start_index = index
    if node_cache[:kwWHILE].has_key?(index)
      cached = node_cache[:kwWHILE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('while', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('while')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-z0-9_]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Piggly::Parser::Nodes::TKeyword,input, i0...index, s0)
      r0.extend(KwWHILE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kwWHILE][start_index] = r0

    r0
  end

end

class PigglyParser < Treetop::Runtime::CompiledParser
  include Piggly
end

