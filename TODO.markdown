# TODO

## Generate code coverage from an event log file

Piggly is split up into separate phases (recompile procs, install them, run
while recording events, uninstall the procs, generate report). If the run +
record step was split in two, piggly could be fed a text file generated by
tests run in any language.

* dump procs to cache
* recompile procs
* install recompiled procs
* clear coverage
* execute tests
* reinstall original procs
* update coverage
* generate report index
* generate reports

## Rudimentary profiling

There is no easy way to profile PL/pgSQL besides adding `raise info '%', now`
manually. Piggly's instrumentation support procs could easily be extended to
print timestamps on each event. It's not clear how to present this information
in the report without it becoming cluttered.

## Coverage pragmas

Some loops and branches cannot be fully covered in practice. It might be useful
to extend piggly to recognize pragmas like `-- piggly: no coverage`, so certain
nodes wouldn't be tagged. However, it may ambiguous which node was intended to
be annotated in a nest of nodes... and should the pragma apply to the node's
descendants?

## Small things
* Don't show OUT parameter types in Dumper::Index#label
* Support for user-provided stylesheet
* Remove linebreaks from Compiler::Trace, so error messages line numbers match
  the report and the original uninstrumented source
* Print the percent change in coverage after "Reporting coverage for ..."
* Optional to generate index for all previously exercised procs, when -n was used to
  update coverage for specific procs.
* Prevent instrumenting a previously instrumented proc, which happens when the previous
  restore failed. This causes failure to ping tags generated from last time
